/* tslint:disable */
/* eslint-disable */
/*
Sent.dm Core API

Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.

The version of the OpenAPI document: 1.1.0
Contact: developers@sent.dm

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponsesTemplateResponse } from '../models';
// @ts-ignore
import { TemplateCreateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export const TemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new message template that can be used for sending standardized messages across different channels. Templates ensure consistent messaging and support variable substitution.
         * @summary Create a new message template
         * @param {TemplateCreateRequest} templateCreateRequest Template creation details including customer ID and template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (templateCreateRequest: TemplateCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateCreateRequest' is not null or undefined
            assertParamExists('createTemplate', 'templateCreateRequest', templateCreateRequest)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: templateCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(templateCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all message templates associated with the specified customer ID. Templates are returned in descending order by creation date.
         * @summary Retrieve all templates for a customer
         * @param {string} customerId Unique identifier of the customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesForCustomer: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getTemplatesForCustomer', 'customerId', customerId)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplatesApi - functional programming interface
 * @export
 */
export const TemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new message template that can be used for sending standardized messages across different channels. Templates ensure consistent messaging and support variable substitution.
         * @summary Create a new message template
         * @param {TemplatesApiCreateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(requestParameters: TemplatesApiCreateTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesTemplateResponse>> {
            const templateCreateRequest: TemplateCreateRequest = {
                customerId: requestParameters.customerId,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(templateCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all message templates associated with the specified customer ID. Templates are returned in descending order by creation date.
         * @summary Retrieve all templates for a customer
         * @param {TemplatesApiGetTemplatesForCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplatesForCustomer(requestParameters: TemplatesApiGetTemplatesForCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponsesTemplateResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplatesForCustomer(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplatesApi - factory interface
 * @export
 */
export const TemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplatesApiFp(configuration)
    return {
        /**
         * Creates a new message template that can be used for sending standardized messages across different channels. Templates ensure consistent messaging and support variable substitution.
         * @summary Create a new message template
         * @param {TemplatesApiCreateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(requestParameters: TemplatesApiCreateTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<ResponsesTemplateResponse> {
            return localVarFp.createTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all message templates associated with the specified customer ID. Templates are returned in descending order by creation date.
         * @summary Retrieve all templates for a customer
         * @param {TemplatesApiGetTemplatesForCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesForCustomer(requestParameters: TemplatesApiGetTemplatesForCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResponsesTemplateResponse>> {
            return localVarFp.getTemplatesForCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTemplate operation in TemplatesApi.
 * @export
 * @interface TemplatesApiCreateTemplateRequest
 */
export type TemplatesApiCreateTemplateRequest = {
    
} & TemplateCreateRequest

/**
 * Request parameters for getTemplatesForCustomer operation in TemplatesApi.
 * @export
 * @interface TemplatesApiGetTemplatesForCustomerRequest
 */
export type TemplatesApiGetTemplatesForCustomerRequest = {
    
    /**
    * Unique identifier of the customer
    * @type {string}
    * @memberof TemplatesApiGetTemplatesForCustomer
    */
    readonly customerId: string
    
}

/**
 * TemplatesApiGenerated - object-oriented interface
 * @export
 * @class TemplatesApiGenerated
 * @extends {BaseAPI}
 */
export class TemplatesApiGenerated extends BaseAPI {
    /**
     * Creates a new message template that can be used for sending standardized messages across different channels. Templates ensure consistent messaging and support variable substitution.
     * @summary Create a new message template
     * @param {TemplatesApiCreateTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiGenerated
     */
    public createTemplate(requestParameters: TemplatesApiCreateTemplateRequest, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).createTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all message templates associated with the specified customer ID. Templates are returned in descending order by creation date.
     * @summary Retrieve all templates for a customer
     * @param {TemplatesApiGetTemplatesForCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiGenerated
     */
    public getTemplatesForCustomer(requestParameters: TemplatesApiGetTemplatesForCustomerRequest, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).getTemplatesForCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
