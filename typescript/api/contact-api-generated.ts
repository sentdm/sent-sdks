/* tslint:disable */
/* eslint-disable */
/*
Sent.dm Core API

Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.

The version of the OpenAPI document: 1.1.0
Contact: developers@sent.dm

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Contact } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches detailed contact information including available messaging channels and verification status. Use this endpoint when you need to look up a specific contact using their unique identifier.
         * @summary Retrieve a contact by ID
         * @param {string} customerId Unique identifier of the customer account
         * @param {string} id Unique identifier of the contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactById: async (customerId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getContactById', 'customerId', customerId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getContactById', 'id', id)
            const localVarPath = `/contact/{customerId}/id/{id}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contact/{customerId}/id/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Looks up contact information using a phone number. This endpoint is useful when you need to find a contact\'s details but only have their phone number. It returns the same detailed information as the ID-based lookup.
         * @summary Retrieve a contact by phone number
         * @param {string} customerId Unique identifier of the customer account
         * @param {string} phoneNumber Phone number in E.164 format (e.g., +1234567890)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactByPhone: async (customerId: string, phoneNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getContactByPhone', 'customerId', customerId)
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('getContactByPhone', 'phoneNumber', phoneNumber)
            const localVarPath = `/contact/{customerId}/phone/{phoneNumber}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"phoneNumber"}}`, encodeURIComponent(String(phoneNumber !== undefined ? phoneNumber : `-phoneNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contact/{customerId}/phone/{phoneNumber}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches detailed contact information including available messaging channels and verification status. Use this endpoint when you need to look up a specific contact using their unique identifier.
         * @summary Retrieve a contact by ID
         * @param {ContactApiGetContactByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactById(requestParameters: ContactApiGetContactByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactById(requestParameters.customerId, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Looks up contact information using a phone number. This endpoint is useful when you need to find a contact\'s details but only have their phone number. It returns the same detailed information as the ID-based lookup.
         * @summary Retrieve a contact by phone number
         * @param {ContactApiGetContactByPhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactByPhone(requestParameters: ContactApiGetContactByPhoneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactByPhone(requestParameters.customerId, requestParameters.phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactApiFp(configuration)
    return {
        /**
         * Fetches detailed contact information including available messaging channels and verification status. Use this endpoint when you need to look up a specific contact using their unique identifier.
         * @summary Retrieve a contact by ID
         * @param {ContactApiGetContactByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactById(requestParameters: ContactApiGetContactByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Contact> {
            return localVarFp.getContactById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Looks up contact information using a phone number. This endpoint is useful when you need to find a contact\'s details but only have their phone number. It returns the same detailed information as the ID-based lookup.
         * @summary Retrieve a contact by phone number
         * @param {ContactApiGetContactByPhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactByPhone(requestParameters: ContactApiGetContactByPhoneRequest, options?: AxiosRequestConfig): AxiosPromise<Contact> {
            return localVarFp.getContactByPhone(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getContactById operation in ContactApi.
 * @export
 * @interface ContactApiGetContactByIdRequest
 */
export type ContactApiGetContactByIdRequest = {
    
    /**
    * Unique identifier of the customer account
    * @type {string}
    * @memberof ContactApiGetContactById
    */
    readonly customerId: string
    
    /**
    * Unique identifier of the contact
    * @type {string}
    * @memberof ContactApiGetContactById
    */
    readonly id: string
    
}

/**
 * Request parameters for getContactByPhone operation in ContactApi.
 * @export
 * @interface ContactApiGetContactByPhoneRequest
 */
export type ContactApiGetContactByPhoneRequest = {
    
    /**
    * Unique identifier of the customer account
    * @type {string}
    * @memberof ContactApiGetContactByPhone
    */
    readonly customerId: string
    
    /**
    * Phone number in E.164 format (e.g., +1234567890)
    * @type {string}
    * @memberof ContactApiGetContactByPhone
    */
    readonly phoneNumber: string
    
}

/**
 * ContactApiGenerated - object-oriented interface
 * @export
 * @class ContactApiGenerated
 * @extends {BaseAPI}
 */
export class ContactApiGenerated extends BaseAPI {
    /**
     * Fetches detailed contact information including available messaging channels and verification status. Use this endpoint when you need to look up a specific contact using their unique identifier.
     * @summary Retrieve a contact by ID
     * @param {ContactApiGetContactByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApiGenerated
     */
    public getContactById(requestParameters: ContactApiGetContactByIdRequest, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).getContactById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Looks up contact information using a phone number. This endpoint is useful when you need to find a contact\'s details but only have their phone number. It returns the same detailed information as the ID-based lookup.
     * @summary Retrieve a contact by phone number
     * @param {ContactApiGetContactByPhoneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApiGenerated
     */
    public getContactByPhone(requestParameters: ContactApiGetContactByPhoneRequest, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).getContactByPhone(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
