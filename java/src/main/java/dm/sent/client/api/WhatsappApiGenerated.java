/*
 * Sent.dm Core API
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package dm.sent.client.api;

import dm.sent.client.ApiCallback;
import dm.sent.client.ApiClient;
import dm.sent.client.ApiException;
import dm.sent.client.ApiResponse;
import dm.sent.client.Configuration;
import dm.sent.client.Pair;
import dm.sent.client.ProgressRequestBody;
import dm.sent.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import dm.sent.client.model.WhatsAppPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WhatsappApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WhatsappApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WhatsappApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getWhatsappContactCall(String phoneNumber, Boolean retrieveIfDoesNotExists, UUID sentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumber", phoneNumber));
        }

        if (retrieveIfDoesNotExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrieveIfDoesNotExists", retrieveIfDoesNotExists));
        }

        if (sentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentId", sentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWhatsappContactValidateBeforeCall(String phoneNumber, Boolean retrieveIfDoesNotExists, UUID sentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling getWhatsappContact(Async)");
        }

        // verify the required parameter 'retrieveIfDoesNotExists' is set
        if (retrieveIfDoesNotExists == null) {
            throw new ApiException("Missing the required parameter 'retrieveIfDoesNotExists' when calling getWhatsappContact(Async)");
        }

        return getWhatsappContactCall(phoneNumber, retrieveIfDoesNotExists, sentId, _callback);

    }


    private ApiResponse<WhatsAppPayload> getWhatsappContactWithHttpInfo(String phoneNumber, Boolean retrieveIfDoesNotExists, UUID sentId) throws ApiException {
        okhttp3.Call localVarCall = getWhatsappContactValidateBeforeCall(phoneNumber, retrieveIfDoesNotExists, sentId, null);
        Type localVarReturnType = new TypeToken<WhatsAppPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWhatsappContactAsync(String phoneNumber, Boolean retrieveIfDoesNotExists, UUID sentId, final ApiCallback<WhatsAppPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWhatsappContactValidateBeforeCall(phoneNumber, retrieveIfDoesNotExists, sentId, _callback);
        Type localVarReturnType = new TypeToken<WhatsAppPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetWhatsappContactRequestBuilderGenerated {
        final String phoneNumber;
        final Boolean retrieveIfDoesNotExists;
        UUID sentId;

        public GetWhatsappContactRequestBuilderGenerated(String phoneNumber, Boolean retrieveIfDoesNotExists) {
            this.phoneNumber = phoneNumber;
            this.retrieveIfDoesNotExists = retrieveIfDoesNotExists;
        }

        /**
         * Set sentId
         * @param sentId Optional Sent platform identifier for tracking (optional)
         * @return WhatsappApi.GetWhatsappContactRequestBuilder
         */
        public WhatsappApi.GetWhatsappContactRequestBuilder sentId(UUID sentId) {
            this.sentId = sentId;
            return (WhatsappApi.GetWhatsappContactRequestBuilder) this;
        }
        
        /**
         * Build call for getWhatsappContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved WhatsApp contact information </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> WhatsApp contact not found and creation not requested </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWhatsappContactCall(phoneNumber, retrieveIfDoesNotExists, sentId, _callback);
        }


        /**
         * Execute getWhatsappContact request
         * @return WhatsAppPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved WhatsApp contact information </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> WhatsApp contact not found and creation not requested </td><td>  -  </td></tr>
         </table>
         */
        public WhatsAppPayload execute() throws ApiException {
            ApiResponse<WhatsAppPayload> localVarResp = getWhatsappContactWithHttpInfo(phoneNumber, retrieveIfDoesNotExists, sentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWhatsappContact request with HTTP info returned
         * @return ApiResponse&lt;WhatsAppPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved WhatsApp contact information </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> WhatsApp contact not found and creation not requested </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WhatsAppPayload> executeWithHttpInfo() throws ApiException {
            return getWhatsappContactWithHttpInfo(phoneNumber, retrieveIfDoesNotExists, sentId);
        }

        /**
         * Execute getWhatsappContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved WhatsApp contact information </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> WhatsApp contact not found and creation not requested </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WhatsAppPayload> _callback) throws ApiException {
            return getWhatsappContactAsync(phoneNumber, retrieveIfDoesNotExists, sentId, _callback);
        }
    }

    /**
     * Retrieve WhatsApp contact information
     * Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
     * @param phoneNumber Phone number in international format (E.164) (required)
     * @param retrieveIfDoesNotExists Whether to create a new contact if one doesn&#39;t exist (required)
     * @return GetWhatsappContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved WhatsApp contact information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> WhatsApp contact not found and creation not requested </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappApi.GetWhatsappContactRequestBuilder getWhatsappContact(String phoneNumber, Boolean retrieveIfDoesNotExists) throws IllegalArgumentException {
        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
            

        if (retrieveIfDoesNotExists == null) throw new IllegalArgumentException("\"retrieveIfDoesNotExists\" is required but got null");
        return ((WhatsappApi) this).new GetWhatsappContactRequestBuilder(phoneNumber, retrieveIfDoesNotExists);
    }
}
