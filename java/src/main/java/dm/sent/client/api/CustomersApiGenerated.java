/*
 * Sent.dm Core API
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package dm.sent.client.api;

import dm.sent.client.ApiCallback;
import dm.sent.client.ApiClient;
import dm.sent.client.ApiException;
import dm.sent.client.ApiResponse;
import dm.sent.client.Configuration;
import dm.sent.client.Pair;
import dm.sent.client.ProgressRequestBody;
import dm.sent.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import dm.sent.client.model.Customer;
import dm.sent.client.model.CustomersUpdateCustomerRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCustomerCall(String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCustomer(Async)");
        }

        return createCustomerCall(body, _callback);

    }


    private ApiResponse<Customer> createCustomerWithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomerAsync(String body, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class CreateCustomerRequestBuilderGenerated {
        String body;

        public CreateCustomerRequestBuilderGenerated() {
        }

        /**
         * Set body
         * @param body Customer name to create the account (optional)
         * @return CustomersApi.CreateCustomerRequestBuilder
         */
        public CustomersApi.CreateCustomerRequestBuilder body(String body) {
            this.body = body;
            return (CustomersApi.CreateCustomerRequestBuilder) this;
        }

        /**
         * Build call for createCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer successfully created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return createCustomerCall(body, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute createCustomer request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer successfully created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            String body = buildBodyParams();
            ApiResponse<Customer> localVarResp = createCustomerWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomer request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer successfully created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return createCustomerWithHttpInfo(body);
        }

        /**
         * Execute createCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer successfully created </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            String body = buildBodyParams();
            return createCustomerAsync(body, _callback);
        }
    }

    /**
     * Create a new customer account
     * Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
     * @param body Customer name to create the account (required)
     * @return CreateCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customer successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public CustomersApi.CreateCustomerRequestBuilder createCustomer() throws IllegalArgumentException {
        return ((CustomersApi) this).new CreateCustomerRequestBuilder();
    }
    private okhttp3.Call deleteCustomerCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCustomer(Async)");
        }

        return deleteCustomerCall(id, _callback);

    }


    private ApiResponse<Void> deleteCustomerWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomerAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public abstract class DeleteCustomerRequestBuilderGenerated {
        final UUID id;

        public DeleteCustomerRequestBuilderGenerated(UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer successfully deleted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomerCall(id, _callback);
        }


        /**
         * Execute deleteCustomer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer successfully deleted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomerWithHttpInfo(id);
        }

        /**
         * Execute deleteCustomer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer successfully deleted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomerWithHttpInfo(id);
        }

        /**
         * Execute deleteCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer successfully deleted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomerAsync(id, _callback);
        }
    }

    /**
     * Delete a customer
     * Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
     * @param id Unique identifier of the customer to delete (required)
     * @return DeleteCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customer successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
     </table>
     */
    public CustomersApi.DeleteCustomerRequestBuilder deleteCustomer(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return ((CustomersApi) this).new DeleteCustomerRequestBuilder(id);
    }
    private okhttp3.Call getAllCustomersCall(Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCustomersValidateBeforeCall(Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getAllCustomers(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getAllCustomers(Async)");
        }

        return getAllCustomersCall(page, pageSize, _callback);

    }


    private ApiResponse<List<Customer>> getAllCustomersWithHttpInfo(Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllCustomersValidateBeforeCall(page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllCustomersAsync(Integer page, Integer pageSize, final ApiCallback<List<Customer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCustomersValidateBeforeCall(page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetAllCustomersRequestBuilderGenerated {
        final Integer page;
        final Integer pageSize;

        public GetAllCustomersRequestBuilderGenerated(Integer page, Integer pageSize) {
            this.page = page;
            this.pageSize = pageSize;
        }

        /**
         * Build call for getAllCustomers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of customers retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCustomersCall(page, pageSize, _callback);
        }


        /**
         * Execute getAllCustomers request
         * @return List&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of customers retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public List<Customer> execute() throws ApiException {
            ApiResponse<List<Customer>> localVarResp = getAllCustomersWithHttpInfo(page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllCustomers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Customer&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of customers retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Customer>> executeWithHttpInfo() throws ApiException {
            return getAllCustomersWithHttpInfo(page, pageSize);
        }

        /**
         * Execute getAllCustomers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of customers retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Customer>> _callback) throws ApiException {
            return getAllCustomersAsync(page, pageSize, _callback);
        }
    }

    /**
     * Retrieve all customers with pagination
     * Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
     * @param page Page number to retrieve (starts from 1) (required)
     * @param pageSize Number of items to return per page (required)
     * @return GetAllCustomersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of customers retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public CustomersApi.GetAllCustomersRequestBuilder getAllCustomers(Integer page, Integer pageSize) throws IllegalArgumentException {
        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return ((CustomersApi) this).new GetAllCustomersRequestBuilder(page, pageSize);
    }
    private okhttp3.Call getCustomerByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCustomerById(Async)");
        }

        return getCustomerByIdCall(id, _callback);

    }


    private ApiResponse<Customer> getCustomerByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getCustomerByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerByIdAsync(UUID id, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetCustomerByIdRequestBuilderGenerated {
        final UUID id;

        public GetCustomerByIdRequestBuilderGenerated(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getCustomerById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer details retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerByIdCall(id, _callback);
        }


        /**
         * Execute getCustomerById request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer details retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            ApiResponse<Customer> localVarResp = getCustomerByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerById request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer details retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            return getCustomerByIdWithHttpInfo(id);
        }

        /**
         * Execute getCustomerById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer details retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            return getCustomerByIdAsync(id, _callback);
        }
    }

    /**
     * Retrieve a customer by ID
     * Returns detailed information about a specific customer including their messaging channel configurations and credentials.
     * @param id Unique identifier of the customer (required)
     * @return GetCustomerByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customer details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
     </table>
     */
    public CustomersApi.GetCustomerByIdRequestBuilder getCustomerById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return ((CustomersApi) this).new GetCustomerByIdRequestBuilder(id);
    }
    private okhttp3.Call updateCustomerCall(UUID id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customersUpdateCustomerRequest;

        // create path and map variables
        String localVarPath = "/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerValidateBeforeCall(UUID id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCustomer(Async)");
        }

        // verify the required parameter 'customersUpdateCustomerRequest' is set
        if (customersUpdateCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'customersUpdateCustomerRequest' when calling updateCustomer(Async)");
        }

        return updateCustomerCall(id, customersUpdateCustomerRequest, _callback);

    }


    private ApiResponse<Customer> updateCustomerWithHttpInfo(UUID id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(id, customersUpdateCustomerRequest, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomerAsync(UUID id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(id, customersUpdateCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class UpdateCustomerRequestBuilderGenerated {
        final UUID id;
        String name;
        String sendingPhoneNumber;
        String smsMessagingProfileId;
        String smsBearerToken;

        public UpdateCustomerRequestBuilderGenerated(UUID id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name Updated name of the customer organization (optional)
         * @return CustomersApi.UpdateCustomerRequestBuilder
         */
        public CustomersApi.UpdateCustomerRequestBuilder name(String name) {
            this.name = name;
            return (CustomersApi.UpdateCustomerRequestBuilder) this;
        }
        
        /**
         * Set sendingPhoneNumber
         * @param sendingPhoneNumber Updated primary phone number for sending messages (optional)
         * @return CustomersApi.UpdateCustomerRequestBuilder
         */
        public CustomersApi.UpdateCustomerRequestBuilder sendingPhoneNumber(String sendingPhoneNumber) {
            this.sendingPhoneNumber = sendingPhoneNumber;
            return (CustomersApi.UpdateCustomerRequestBuilder) this;
        }
        
        /**
         * Set smsMessagingProfileId
         * @param smsMessagingProfileId Updated SMS messaging profile identifier (optional)
         * @return CustomersApi.UpdateCustomerRequestBuilder
         */
        public CustomersApi.UpdateCustomerRequestBuilder smsMessagingProfileId(String smsMessagingProfileId) {
            this.smsMessagingProfileId = smsMessagingProfileId;
            return (CustomersApi.UpdateCustomerRequestBuilder) this;
        }
        
        /**
         * Set smsBearerToken
         * @param smsBearerToken Updated bearer token for SMS authentication (optional)
         * @return CustomersApi.UpdateCustomerRequestBuilder
         */
        public CustomersApi.UpdateCustomerRequestBuilder smsBearerToken(String smsBearerToken) {
            this.smsBearerToken = smsBearerToken;
            return (CustomersApi.UpdateCustomerRequestBuilder) this;
        }
        
        /**
         * Build call for updateCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer updated successfully </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = buildBodyParams();
            return updateCustomerCall(id, customersUpdateCustomerRequest, _callback);
        }

        private CustomersUpdateCustomerRequest buildBodyParams() {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = new CustomersUpdateCustomerRequest();
            customersUpdateCustomerRequest.name(this.name);
            customersUpdateCustomerRequest.sendingPhoneNumber(this.sendingPhoneNumber);
            customersUpdateCustomerRequest.smsMessagingProfileId(this.smsMessagingProfileId);
            customersUpdateCustomerRequest.smsBearerToken(this.smsBearerToken);
            return customersUpdateCustomerRequest;
        }

        /**
         * Execute updateCustomer request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer updated successfully </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = buildBodyParams();
            ApiResponse<Customer> localVarResp = updateCustomerWithHttpInfo(id, customersUpdateCustomerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomer request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer updated successfully </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = buildBodyParams();
            return updateCustomerWithHttpInfo(id, customersUpdateCustomerRequest);
        }

        /**
         * Execute updateCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Customer updated successfully </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = buildBodyParams();
            return updateCustomerAsync(id, customersUpdateCustomerRequest, _callback);
        }
    }

    /**
     * Update customer information
     * Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
     * @param id Unique identifier of the customer to update (required)
     * @param customersUpdateCustomerRequest Updated customer information (required)
     * @return UpdateCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customer updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Customer not found </td><td>  -  </td></tr>
     </table>
     */
    public CustomersApi.UpdateCustomerRequestBuilder updateCustomer(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return ((CustomersApi) this).new UpdateCustomerRequestBuilder(id);
    }
}
