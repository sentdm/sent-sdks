/*
 * Sent.dm Core API
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package dm.sent.client.api;

import dm.sent.client.ApiCallback;
import dm.sent.client.ApiClient;
import dm.sent.client.ApiException;
import dm.sent.client.ApiResponse;
import dm.sent.client.Configuration;
import dm.sent.client.Pair;
import dm.sent.client.ProgressRequestBody;
import dm.sent.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import dm.sent.client.model.SMSPayload;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SmsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SmsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getContactInfoCall(String phoneNumber, Boolean retrieveIfDoesNotExists, UUID sentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumber", phoneNumber));
        }

        if (retrieveIfDoesNotExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrieveIfDoesNotExists", retrieveIfDoesNotExists));
        }

        if (sentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentId", sentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactInfoValidateBeforeCall(String phoneNumber, Boolean retrieveIfDoesNotExists, UUID sentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling getContactInfo(Async)");
        }

        // verify the required parameter 'retrieveIfDoesNotExists' is set
        if (retrieveIfDoesNotExists == null) {
            throw new ApiException("Missing the required parameter 'retrieveIfDoesNotExists' when calling getContactInfo(Async)");
        }

        return getContactInfoCall(phoneNumber, retrieveIfDoesNotExists, sentId, _callback);

    }


    private ApiResponse<SMSPayload> getContactInfoWithHttpInfo(String phoneNumber, Boolean retrieveIfDoesNotExists, UUID sentId) throws ApiException {
        okhttp3.Call localVarCall = getContactInfoValidateBeforeCall(phoneNumber, retrieveIfDoesNotExists, sentId, null);
        Type localVarReturnType = new TypeToken<SMSPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContactInfoAsync(String phoneNumber, Boolean retrieveIfDoesNotExists, UUID sentId, final ApiCallback<SMSPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactInfoValidateBeforeCall(phoneNumber, retrieveIfDoesNotExists, sentId, _callback);
        Type localVarReturnType = new TypeToken<SMSPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetContactInfoRequestBuilderGenerated {
        final String phoneNumber;
        final Boolean retrieveIfDoesNotExists;
        UUID sentId;

        public GetContactInfoRequestBuilderGenerated(String phoneNumber, Boolean retrieveIfDoesNotExists) {
            this.phoneNumber = phoneNumber;
            this.retrieveIfDoesNotExists = retrieveIfDoesNotExists;
        }

        /**
         * Set sentId
         * @param sentId Optional Sent platform identifier for existing contacts (optional)
         * @return SmsApi.GetContactInfoRequestBuilder
         */
        public SmsApi.GetContactInfoRequestBuilder sentId(UUID sentId) {
            this.sentId = sentId;
            return (SmsApi.GetContactInfoRequestBuilder) this;
        }
        
        /**
         * Build call for getContactInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved SMS contact information </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContactInfoCall(phoneNumber, retrieveIfDoesNotExists, sentId, _callback);
        }


        /**
         * Execute getContactInfo request
         * @return SMSPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved SMS contact information </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
         </table>
         */
        public SMSPayload execute() throws ApiException {
            ApiResponse<SMSPayload> localVarResp = getContactInfoWithHttpInfo(phoneNumber, retrieveIfDoesNotExists, sentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContactInfo request with HTTP info returned
         * @return ApiResponse&lt;SMSPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved SMS contact information </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SMSPayload> executeWithHttpInfo() throws ApiException {
            return getContactInfoWithHttpInfo(phoneNumber, retrieveIfDoesNotExists, sentId);
        }

        /**
         * Execute getContactInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved SMS contact information </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SMSPayload> _callback) throws ApiException {
            return getContactInfoAsync(phoneNumber, retrieveIfDoesNotExists, sentId, _callback);
        }
    }

    /**
     * Retrieve SMS contact information and capabilities
     * Fetches or creates SMS contact information for a given phone number. This endpoint validates the phone number, determines SMS capabilities, and returns detailed formatting information needed for message delivery. Use this before sending messages to ensure proper SMS channel availability.
     * @param phoneNumber Target phone number in E.164 format (e.g., +1234567890) (required)
     * @param retrieveIfDoesNotExists When true, creates a new SMS contact if one doesn&#39;t exist (required)
     * @return GetContactInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SMS contact information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing API key </td><td>  -  </td></tr>
     </table>
     */
    public SmsApi.GetContactInfoRequestBuilder getContactInfo(String phoneNumber, Boolean retrieveIfDoesNotExists) throws IllegalArgumentException {
        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
            

        if (retrieveIfDoesNotExists == null) throw new IllegalArgumentException("\"retrieveIfDoesNotExists\" is required but got null");
        return ((SmsApi) this).new GetContactInfoRequestBuilder(phoneNumber, retrieveIfDoesNotExists);
    }
}
