/*
 * Sent.dm Core API
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package dm.sent.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import dm.sent.client.JSON;

/**
 * SMSPayloadAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SMSPayloadAllOf {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_VALID_NUMBER = "validNumber";
  @SerializedName(SERIALIZED_NAME_VALID_NUMBER)
  private Boolean validNumber;

  public static final String SERIALIZED_NAME_NATIONAL_FORMAT = "nationalFormat";
  @SerializedName(SERIALIZED_NAME_NATIONAL_FORMAT)
  private String nationalFormat;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  public SMSPayloadAllOf() {
  }

  public SMSPayloadAllOf countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * ISO country code for the phone number
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "ISO country code for the phone number")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public SMSPayloadAllOf validNumber(Boolean validNumber) {
    
    
    
    
    this.validNumber = validNumber;
    return this;
  }

   /**
   * Indicates if the phone number is valid for SMS delivery
   * @return validNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates if the phone number is valid for SMS delivery")

  public Boolean getValidNumber() {
    return validNumber;
  }


  public void setValidNumber(Boolean validNumber) {
    
    
    
    this.validNumber = validNumber;
  }


  public SMSPayloadAllOf nationalFormat(String nationalFormat) {
    
    
    
    
    this.nationalFormat = nationalFormat;
    return this;
  }

   /**
   * Locally formatted version of the phone number
   * @return nationalFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "(415) 555-2671", value = "Locally formatted version of the phone number")

  public String getNationalFormat() {
    return nationalFormat;
  }


  public void setNationalFormat(String nationalFormat) {
    
    
    
    this.nationalFormat = nationalFormat;
  }


  public SMSPayloadAllOf payload(String payload) {
    
    
    
    
    this.payload = payload;
    return this;
  }

   /**
   * Additional payload information in JSON format
   * @return payload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"carrier\":\"Verizon\",\"type\":\"mobile\"}", value = "Additional payload information in JSON format")

  public String getPayload() {
    return payload;
  }


  public void setPayload(String payload) {
    
    
    
    this.payload = payload;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SMSPayloadAllOf instance itself
   */
  public SMSPayloadAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SMSPayloadAllOf smSPayloadAllOf = (SMSPayloadAllOf) o;
    return Objects.equals(this.countryCode, smSPayloadAllOf.countryCode) &&
        Objects.equals(this.validNumber, smSPayloadAllOf.validNumber) &&
        Objects.equals(this.nationalFormat, smSPayloadAllOf.nationalFormat) &&
        Objects.equals(this.payload, smSPayloadAllOf.payload)&&
        Objects.equals(this.additionalProperties, smSPayloadAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, validNumber, nationalFormat, payload, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SMSPayloadAllOf {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    validNumber: ").append(toIndentedString(validNumber)).append("\n");
    sb.append("    nationalFormat: ").append(toIndentedString(nationalFormat)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("validNumber");
    openapiFields.add("nationalFormat");
    openapiFields.add("payload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SMSPayloadAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SMSPayloadAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SMSPayloadAllOf is not found in the empty JSON string", SMSPayloadAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("nationalFormat") != null && !jsonObj.get("nationalFormat").isJsonNull()) && !jsonObj.get("nationalFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalFormat").toString()));
      }
      if ((jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) && !jsonObj.get("payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SMSPayloadAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SMSPayloadAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SMSPayloadAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SMSPayloadAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<SMSPayloadAllOf>() {
           @Override
           public void write(JsonWriter out, SMSPayloadAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else if (entry.getValue() == null) {
                   obj.addProperty(entry.getKey(), (String) null);
                 } else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SMSPayloadAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SMSPayloadAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SMSPayloadAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SMSPayloadAllOf
  * @throws IOException if the JSON string is invalid with respect to SMSPayloadAllOf
  */
  public static SMSPayloadAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SMSPayloadAllOf.class);
  }

 /**
  * Convert an instance of SMSPayloadAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

