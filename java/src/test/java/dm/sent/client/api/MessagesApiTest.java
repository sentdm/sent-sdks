/*
 * Sent.dm Core API
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package dm.sent.client.api;

import dm.sent.client.ApiException;
import dm.sent.client.ApiClient;
import dm.sent.client.ApiException;
import dm.sent.client.Configuration;
import dm.sent.client.model.MessagesSendMessageToContactResponse;
import dm.sent.client.model.MessagesSendMessageToPhoneNumberResponse;
import dm.sent.client.model.SendMessageToContactRequest;
import dm.sent.client.model.SendMessageToPhoneNumberRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApi
 */
@Disabled
public class MessagesApiTest {

    private static MessagesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MessagesApi(apiClient);
    }

    /**
     * Send a message to a contact using a template
     *
     * Sends a templated message to a specific contact. The platform automatically determines the optimal channel (SMS or WhatsApp) based on the contact&#39;s preferences and availability. Messages are sent using pre-defined templates to ensure consistent formatting and compliance across channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageToContactTest() throws ApiException {
        UUID customerId = null;
        UUID contactId = null;
        UUID templateId = null;
        MessagesSendMessageToContactResponse response = api.sendMessageToContact(customerId, contactId, templateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a message to a phone number using a template
     *
     * Sends a templated message directly to a phone number without requiring a pre-existing contact. The system will attempt to determine the best channel for delivery and create a contact record if one doesn&#39;t exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageToPhoneNumberTest() throws ApiException {
        UUID customerId = null;
        String phoneNumber = null;
        UUID templateId = null;
        MessagesSendMessageToPhoneNumberResponse response = api.sendMessageToPhoneNumber(customerId, phoneNumber, templateId)
                .execute();
        // TODO: test validations
    }

}
