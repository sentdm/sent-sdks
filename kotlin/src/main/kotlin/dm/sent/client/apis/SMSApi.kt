/**
 *
 * Please note:
 * This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dm.sent.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import dm.sent.client.models.SMSPayload
import dm.sent.client.models.SmsGetContactInfoResponse

import com.squareup.moshi.Json

import dm.sent.client.infrastructure.ApiClient
import dm.sent.client.infrastructure.ApiResponse
import dm.sent.client.infrastructure.ClientException
import dm.sent.client.infrastructure.ClientError
import dm.sent.client.infrastructure.ServerException
import dm.sent.client.infrastructure.ServerError
import dm.sent.client.infrastructure.MultiValueMap
import dm.sent.client.infrastructure.PartConfig
import dm.sent.client.infrastructure.RequestConfig
import dm.sent.client.infrastructure.RequestMethod
import dm.sent.client.infrastructure.ResponseType
import dm.sent.client.infrastructure.Success
import dm.sent.client.infrastructure.toMultiValue

class SMSApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Retrieve SMS contact information and capabilities
     * Fetches or creates SMS contact information for a given phone number. This endpoint validates the phone number, determines SMS capabilities, and returns detailed formatting information needed for message delivery. Use this before sending messages to ensure proper SMS channel availability.
     * @param phoneNumber Target phone number in E.164 format (e.g., +1234567890)
     * @param retrieveIfDoesNotExists When true, creates a new SMS contact if one doesn&#39;t exist
     * @param sentId Optional Sent platform identifier for existing contacts (optional)
     * @return SMSPayload
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getContactInfo(phoneNumber: kotlin.String, retrieveIfDoesNotExists: kotlin.Boolean, sentId: java.util.UUID? = null) : SMSPayload {
        val localVarResponse = getContactInfoWithHttpInfo(phoneNumber = phoneNumber, retrieveIfDoesNotExists = retrieveIfDoesNotExists, sentId = sentId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SMSPayload
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve SMS contact information and capabilities
     * Fetches or creates SMS contact information for a given phone number. This endpoint validates the phone number, determines SMS capabilities, and returns detailed formatting information needed for message delivery. Use this before sending messages to ensure proper SMS channel availability.
     * @param phoneNumber Target phone number in E.164 format (e.g., +1234567890)
     * @param retrieveIfDoesNotExists When true, creates a new SMS contact if one doesn&#39;t exist
     * @param sentId Optional Sent platform identifier for existing contacts (optional)
     * @return ApiResponse<SMSPayload?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getContactInfoWithHttpInfo(phoneNumber: kotlin.String, retrieveIfDoesNotExists: kotlin.Boolean, sentId: java.util.UUID?) : ApiResponse<SMSPayload?> {
        val localVariableConfig = getContactInfoRequestConfig(phoneNumber = phoneNumber, retrieveIfDoesNotExists = retrieveIfDoesNotExists, sentId = sentId)

        return request<Unit, SMSPayload>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getContactInfo
     *
     * @param phoneNumber Target phone number in E.164 format (e.g., +1234567890)
     * @param retrieveIfDoesNotExists When true, creates a new SMS contact if one doesn&#39;t exist
     * @param sentId Optional Sent platform identifier for existing contacts (optional)
     * @return RequestConfig
     */
    fun getContactInfoRequestConfig(phoneNumber: kotlin.String, retrieveIfDoesNotExists: kotlin.Boolean, sentId: java.util.UUID?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("phoneNumber", listOf(phoneNumber.toString()))
                put("retrieveIfDoesNotExists", listOf(retrieveIfDoesNotExists.toString()))
                if (sentId != null) {
                    put("sentId", listOf(sentId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/sms",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
