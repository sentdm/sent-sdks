# coding: utf-8

"""
    Sent.dm Core API

    Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.

    The version of the OpenAPI document: 1.1.0
    Contact: developers@sent.dm
    Created by: https://www.sent.dm/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sentdm import schemas  # noqa: F401


class WhatsAppPayload(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    WhatsApp contact information including profile and verification details
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    whatsappId = schemas.StrSchema
                    countryCode = schemas.StrSchema
                    
                    
                    class numberType(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def MOBILE(cls):
                            return cls("MOBILE")
                        
                        @schemas.classproperty
                        def LANDLINE(cls):
                            return cls("LANDLINE")
                        
                        @schemas.classproperty
                        def VOIP(cls):
                            return cls("VOIP")
                        
                        @schemas.classproperty
                        def UNKNOWN(cls):
                            return cls("UNKNOWN")
                    profilePicture = schemas.StrSchema
                    isBusiness = schemas.BoolSchema
                    invalidRecord = schemas.BoolSchema
                    __annotations__ = {
                        "whatsappId": whatsappId,
                        "countryCode": countryCode,
                        "numberType": numberType,
                        "profilePicture": profilePicture,
                        "isBusiness": isBusiness,
                        "invalidRecord": invalidRecord,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["whatsappId"]) -> MetaOapg.properties.whatsappId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["numberType"]) -> MetaOapg.properties.numberType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["profilePicture"]) -> MetaOapg.properties.profilePicture: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isBusiness"]) -> MetaOapg.properties.isBusiness: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["invalidRecord"]) -> MetaOapg.properties.invalidRecord: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["whatsappId", "countryCode", "numberType", "profilePicture", "isBusiness", "invalidRecord", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["whatsappId"]) -> typing.Union[MetaOapg.properties.whatsappId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["numberType"]) -> typing.Union[MetaOapg.properties.numberType, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["profilePicture"]) -> typing.Union[MetaOapg.properties.profilePicture, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isBusiness"]) -> typing.Union[MetaOapg.properties.isBusiness, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["invalidRecord"]) -> typing.Union[MetaOapg.properties.invalidRecord, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["whatsappId", "countryCode", "numberType", "profilePicture", "isBusiness", "invalidRecord", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                whatsappId: typing.Union[MetaOapg.properties.whatsappId, str, schemas.Unset] = schemas.unset,
                countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
                numberType: typing.Union[MetaOapg.properties.numberType, str, schemas.Unset] = schemas.unset,
                profilePicture: typing.Union[MetaOapg.properties.profilePicture, str, schemas.Unset] = schemas.unset,
                isBusiness: typing.Union[MetaOapg.properties.isBusiness, bool, schemas.Unset] = schemas.unset,
                invalidRecord: typing.Union[MetaOapg.properties.invalidRecord, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    whatsappId=whatsappId,
                    countryCode=countryCode,
                    numberType=numberType,
                    profilePicture=profilePicture,
                    isBusiness=isBusiness,
                    invalidRecord=invalidRecord,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                PayloadPhoneNumber,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WhatsAppPayload':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from sentdm.model.payload_phone_number import PayloadPhoneNumber
