#import <Foundation/Foundation.h>
#import "SCustomer.h"
#import "SCustomersUpdateCustomerRequest.h"
#import "SApi.h"

/**
* Sent.dm Core API
* Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
*
* The version of the OpenAPI document: 1.1.0
* Contact: developers@sent.dm
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface SCustomersApi: NSObject <SApi>

extern NSString* kSCustomersApiErrorDomain;
extern NSInteger kSCustomersApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a new customer account
/// Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
///
/// @param body Customer name to create the account
/// 
///  code:200 message:"Customer successfully created",
///  code:401 message:"Authentication credentials are missing or invalid"
///
/// @return SCustomer*
-(NSURLSessionTask*) createCustomerWithBody: (NSString*) body
    completionHandler: (void (^)(SCustomer* output, NSError* error)) handler;


/// Delete a customer
/// Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
///
/// @param _id Unique identifier of the customer to delete
/// 
///  code:200 message:"Customer successfully deleted",
///  code:404 message:"Customer not found"
///
/// @return void
-(NSURLSessionTask*) deleteCustomerWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Retrieve all customers with pagination
/// Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
///
/// @param page Page number to retrieve (starts from 1)
/// @param pageSize Number of items to return per page
/// 
///  code:200 message:"List of customers retrieved successfully",
///  code:401 message:"Authentication credentials are missing or invalid"
///
/// @return NSArray<SCustomer>*
-(NSURLSessionTask*) getAllCustomersWithPage: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSArray<SCustomer>* output, NSError* error)) handler;


/// Retrieve a customer by ID
/// Returns detailed information about a specific customer including their messaging channel configurations and credentials.
///
/// @param _id Unique identifier of the customer
/// 
///  code:200 message:"Customer details retrieved successfully",
///  code:404 message:"Customer not found"
///
/// @return SCustomer*
-(NSURLSessionTask*) getCustomerByIdWithId: (NSString*) _id
    completionHandler: (void (^)(SCustomer* output, NSError* error)) handler;


/// Update customer information
/// Updates an existing customer's information including messaging channel configurations. All fields in the request body will override existing values.
///
/// @param _id Unique identifier of the customer to update
/// @param customersUpdateCustomerRequest Updated customer information
/// 
///  code:200 message:"Customer updated successfully",
///  code:401 message:"Authentication credentials are missing or invalid",
///  code:404 message:"Customer not found"
///
/// @return SCustomer*
-(NSURLSessionTask*) updateCustomerWithId: (NSString*) _id
    customersUpdateCustomerRequest: (SCustomersUpdateCustomerRequest*) customersUpdateCustomerRequest
    completionHandler: (void (^)(SCustomer* output, NSError* error)) handler;



@end
