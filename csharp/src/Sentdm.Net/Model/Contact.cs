/*
 * Sent.dm Core API
 *
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sentdm.Net.Client.OpenAPIDateConverter;

namespace Sentdm.Net.Model
{
    /// <summary>
    /// Represents a contact in the Sent messaging platform with their communication preferences and channel availability
    /// </summary>
    [DataContract(Name = "Contact")]
    public partial class Contact : IEquatable<Contact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the contact.</param>
        /// <param name="phoneNumber">Contact&#39;s phone number in E.164 format.</param>
        /// <param name="countryCode">Two-letter ISO country code.</param>
        /// <param name="nationalFormat">Phone number formatted according to national standards.</param>
        /// <param name="availableChannels">Comma-separated list of available messaging channels (SMS, WHATSAPP).</param>
        /// <param name="defaultChannel">Preferred messaging channel for this contact.</param>
        /// <param name="verified">Indicates if the contact&#39;s phone number has been verified.</param>
        /// <param name="createdAt">Timestamp when the contact was created.</param>
        /// <param name="updatedAt">Timestamp when the contact was last updated.</param>
        public Contact(string id = default(string), string phoneNumber = default(string), string countryCode = default(string), string nationalFormat = default(string), string availableChannels = default(string), string defaultChannel = default(string), bool verified = default(bool), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            this.Id = id;
            this.PhoneNumber = phoneNumber;
            this.CountryCode = countryCode;
            this.NationalFormat = nationalFormat;
            this.AvailableChannels = availableChannels;
            this.DefaultChannel = defaultChannel;
            this.Verified = verified;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Unique identifier for the contact
        /// </summary>
        /// <value>Unique identifier for the contact</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Contact&#39;s phone number in E.164 format
        /// </summary>
        /// <value>Contact&#39;s phone number in E.164 format</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Two-letter ISO country code
        /// </summary>
        /// <value>Two-letter ISO country code</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Phone number formatted according to national standards
        /// </summary>
        /// <value>Phone number formatted according to national standards</value>
        [DataMember(Name = "nationalFormat", EmitDefaultValue = false)]
        public string NationalFormat { get; set; }

        /// <summary>
        /// Comma-separated list of available messaging channels (SMS, WHATSAPP)
        /// </summary>
        /// <value>Comma-separated list of available messaging channels (SMS, WHATSAPP)</value>
        [DataMember(Name = "availableChannels", EmitDefaultValue = false)]
        public string AvailableChannels { get; set; }

        /// <summary>
        /// Preferred messaging channel for this contact
        /// </summary>
        /// <value>Preferred messaging channel for this contact</value>
        [DataMember(Name = "defaultChannel", EmitDefaultValue = false)]
        public string DefaultChannel { get; set; }

        /// <summary>
        /// Indicates if the contact&#39;s phone number has been verified
        /// </summary>
        /// <value>Indicates if the contact&#39;s phone number has been verified</value>
        [DataMember(Name = "verified", EmitDefaultValue = true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Timestamp when the contact was created
        /// </summary>
        /// <value>Timestamp when the contact was created</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Timestamp when the contact was last updated
        /// </summary>
        /// <value>Timestamp when the contact was last updated</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  NationalFormat: ").Append(NationalFormat).Append("\n");
            sb.Append("  AvailableChannels: ").Append(AvailableChannels).Append("\n");
            sb.Append("  DefaultChannel: ").Append(DefaultChannel).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Contact);
        }

        /// <summary>
        /// Returns true if Contact instances are equal
        /// </summary>
        /// <param name="input">Instance of Contact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.NationalFormat == input.NationalFormat ||
                    (this.NationalFormat != null &&
                    this.NationalFormat.Equals(input.NationalFormat))
                ) && 
                (
                    this.AvailableChannels == input.AvailableChannels ||
                    (this.AvailableChannels != null &&
                    this.AvailableChannels.Equals(input.AvailableChannels))
                ) && 
                (
                    this.DefaultChannel == input.DefaultChannel ||
                    (this.DefaultChannel != null &&
                    this.DefaultChannel.Equals(input.DefaultChannel))
                ) && 
                (
                    this.Verified == input.Verified ||
                    this.Verified.Equals(input.Verified)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.NationalFormat != null)
                {
                    hashCode = (hashCode * 59) + this.NationalFormat.GetHashCode();
                }
                if (this.AvailableChannels != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableChannels.GetHashCode();
                }
                if (this.DefaultChannel != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultChannel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Verified.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
