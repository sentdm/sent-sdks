/*
 * Sent.dm Core API
 *
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sentdm.Net.Client.OpenAPIDateConverter;

namespace Sentdm.Net.Model
{
    /// <summary>
    /// Request model for updating customer information
    /// </summary>
    [DataContract(Name = "CustomersUpdateCustomerRequest")]
    public partial class CustomersUpdateCustomerRequest : IEquatable<CustomersUpdateCustomerRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersUpdateCustomerRequest" /> class.
        /// </summary>
        /// <param name="name">Updated name of the customer organization.</param>
        /// <param name="sendingPhoneNumber">Updated primary phone number for sending messages.</param>
        /// <param name="smsMessagingProfileId">Updated SMS messaging profile identifier.</param>
        /// <param name="smsBearerToken">Updated bearer token for SMS authentication.</param>
        public CustomersUpdateCustomerRequest(string name = default(string), string sendingPhoneNumber = default(string), string smsMessagingProfileId = default(string), string smsBearerToken = default(string))
        {
            this.Name = name;
            this.SendingPhoneNumber = sendingPhoneNumber;
            this.SmsMessagingProfileId = smsMessagingProfileId;
            this.SmsBearerToken = smsBearerToken;
        }

        /// <summary>
        /// Updated name of the customer organization
        /// </summary>
        /// <value>Updated name of the customer organization</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Updated primary phone number for sending messages
        /// </summary>
        /// <value>Updated primary phone number for sending messages</value>
        [DataMember(Name = "sendingPhoneNumber", EmitDefaultValue = false)]
        public string SendingPhoneNumber { get; set; }

        /// <summary>
        /// Updated SMS messaging profile identifier
        /// </summary>
        /// <value>Updated SMS messaging profile identifier</value>
        [DataMember(Name = "smsMessagingProfileId", EmitDefaultValue = false)]
        public string SmsMessagingProfileId { get; set; }

        /// <summary>
        /// Updated bearer token for SMS authentication
        /// </summary>
        /// <value>Updated bearer token for SMS authentication</value>
        [DataMember(Name = "smsBearerToken", EmitDefaultValue = false)]
        public string SmsBearerToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomersUpdateCustomerRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SendingPhoneNumber: ").Append(SendingPhoneNumber).Append("\n");
            sb.Append("  SmsMessagingProfileId: ").Append(SmsMessagingProfileId).Append("\n");
            sb.Append("  SmsBearerToken: ").Append(SmsBearerToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomersUpdateCustomerRequest);
        }

        /// <summary>
        /// Returns true if CustomersUpdateCustomerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomersUpdateCustomerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomersUpdateCustomerRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SendingPhoneNumber == input.SendingPhoneNumber ||
                    (this.SendingPhoneNumber != null &&
                    this.SendingPhoneNumber.Equals(input.SendingPhoneNumber))
                ) && 
                (
                    this.SmsMessagingProfileId == input.SmsMessagingProfileId ||
                    (this.SmsMessagingProfileId != null &&
                    this.SmsMessagingProfileId.Equals(input.SmsMessagingProfileId))
                ) && 
                (
                    this.SmsBearerToken == input.SmsBearerToken ||
                    (this.SmsBearerToken != null &&
                    this.SmsBearerToken.Equals(input.SmsBearerToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SendingPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SendingPhoneNumber.GetHashCode();
                }
                if (this.SmsMessagingProfileId != null)
                {
                    hashCode = (hashCode * 59) + this.SmsMessagingProfileId.GetHashCode();
                }
                if (this.SmsBearerToken != null)
                {
                    hashCode = (hashCode * 59) + this.SmsBearerToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
