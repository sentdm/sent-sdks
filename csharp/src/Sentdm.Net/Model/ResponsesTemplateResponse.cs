/*
 * Sent.dm Core API
 *
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sentdm.Net.Client.OpenAPIDateConverter;

namespace Sentdm.Net.Model
{
    /// <summary>
    /// Response model containing template details
    /// </summary>
    [DataContract(Name = "ResponsesTemplateResponse")]
    public partial class ResponsesTemplateResponse : IEquatable<ResponsesTemplateResponse>, IValidatableObject
    {
        /// <summary>
        /// Category of the template (e.g., transactional, marketing)
        /// </summary>
        /// <value>Category of the template (e.g., transactional, marketing)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Transactional for value: transactional
            /// </summary>
            [EnumMember(Value = "transactional")]
            Transactional = 1,

            /// <summary>
            /// Enum Marketing for value: marketing
            /// </summary>
            [EnumMember(Value = "marketing")]
            Marketing = 2,

            /// <summary>
            /// Enum Alert for value: alert
            /// </summary>
            [EnumMember(Value = "alert")]
            Alert = 3

        }


        /// <summary>
        /// Category of the template (e.g., transactional, marketing)
        /// </summary>
        /// <value>Category of the template (e.g., transactional, marketing)</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Approval status of WhatsApp template
        /// </summary>
        /// <value>Approval status of WhatsApp template</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WhatsappTemplateStatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 2,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 3

        }


        /// <summary>
        /// Approval status of WhatsApp template
        /// </summary>
        /// <value>Approval status of WhatsApp template</value>
        [DataMember(Name = "whatsappTemplateStatus", EmitDefaultValue = false)]
        public WhatsappTemplateStatusEnum? WhatsappTemplateStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponsesTemplateResponse" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the template.</param>
        /// <param name="customerId">Customer ID associated with the template.</param>
        /// <param name="name">Template name.</param>
        /// <param name="category">Category of the template (e.g., transactional, marketing).</param>
        /// <param name="rawBody">Template content with variable placeholders.</param>
        /// <param name="whatsappTemplateName">Associated WhatsApp template name if applicable.</param>
        /// <param name="whatsappTemplateStatus">Approval status of WhatsApp template.</param>
        /// <param name="createdAt">Template creation timestamp.</param>
        /// <param name="updatedAt">Last template update timestamp.</param>
        public ResponsesTemplateResponse(string id = default(string), string customerId = default(string), string name = default(string), CategoryEnum? category = default(CategoryEnum?), string rawBody = default(string), string whatsappTemplateName = default(string), WhatsappTemplateStatusEnum? whatsappTemplateStatus = default(WhatsappTemplateStatusEnum?), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            this.Id = id;
            this.CustomerId = customerId;
            this.Name = name;
            this.Category = category;
            this.RawBody = rawBody;
            this.WhatsappTemplateName = whatsappTemplateName;
            this.WhatsappTemplateStatus = whatsappTemplateStatus;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Unique identifier of the template
        /// </summary>
        /// <value>Unique identifier of the template</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Customer ID associated with the template
        /// </summary>
        /// <value>Customer ID associated with the template</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Template name
        /// </summary>
        /// <value>Template name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Template content with variable placeholders
        /// </summary>
        /// <value>Template content with variable placeholders</value>
        [DataMember(Name = "rawBody", EmitDefaultValue = false)]
        public string RawBody { get; set; }

        /// <summary>
        /// Associated WhatsApp template name if applicable
        /// </summary>
        /// <value>Associated WhatsApp template name if applicable</value>
        [DataMember(Name = "whatsappTemplateName", EmitDefaultValue = false)]
        public string WhatsappTemplateName { get; set; }

        /// <summary>
        /// Template creation timestamp
        /// </summary>
        /// <value>Template creation timestamp</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Last template update timestamp
        /// </summary>
        /// <value>Last template update timestamp</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponsesTemplateResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  RawBody: ").Append(RawBody).Append("\n");
            sb.Append("  WhatsappTemplateName: ").Append(WhatsappTemplateName).Append("\n");
            sb.Append("  WhatsappTemplateStatus: ").Append(WhatsappTemplateStatus).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponsesTemplateResponse);
        }

        /// <summary>
        /// Returns true if ResponsesTemplateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponsesTemplateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponsesTemplateResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.RawBody == input.RawBody ||
                    (this.RawBody != null &&
                    this.RawBody.Equals(input.RawBody))
                ) && 
                (
                    this.WhatsappTemplateName == input.WhatsappTemplateName ||
                    (this.WhatsappTemplateName != null &&
                    this.WhatsappTemplateName.Equals(input.WhatsappTemplateName))
                ) && 
                (
                    this.WhatsappTemplateStatus == input.WhatsappTemplateStatus ||
                    this.WhatsappTemplateStatus.Equals(input.WhatsappTemplateStatus)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.RawBody != null)
                {
                    hashCode = (hashCode * 59) + this.RawBody.GetHashCode();
                }
                if (this.WhatsappTemplateName != null)
                {
                    hashCode = (hashCode * 59) + this.WhatsappTemplateName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WhatsappTemplateStatus.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
