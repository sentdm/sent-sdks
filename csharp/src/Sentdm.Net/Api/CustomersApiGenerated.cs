/*
 * Sent.dm Core API
 *
 * Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@sent.dm
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sentdm.Net.Client;
using Sentdm.Net.Model;

namespace Sentdm.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new customer account
        /// </summary>
        /// <remarks>
        /// Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Customer name to create the account</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        Customer CreateCustomer(string body, int operationIndex = 0);

        /// <summary>
        /// Create a new customer account
        /// </summary>
        /// <remarks>
        /// Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Customer name to create the account</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CreateCustomerWithHttpInfo(string body, int operationIndex = 0);
        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCustomer(string id, int operationIndex = 0);

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Retrieve all customers with pagination
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve (starts from 1)</param>
        /// <param name="pageSize">Number of items to return per page</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Customer&gt;</returns>
        List<Customer> GetAllCustomers(int page, int pageSize, int operationIndex = 0);

        /// <summary>
        /// Retrieve all customers with pagination
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve (starts from 1)</param>
        /// <param name="pageSize">Number of items to return per page</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Customer&gt;</returns>
        ApiResponse<List<Customer>> GetAllCustomersWithHttpInfo(int page, int pageSize, int operationIndex = 0);
        /// <summary>
        /// Retrieve a customer by ID
        /// </summary>
        /// <remarks>
        /// Returns detailed information about a specific customer including their messaging channel configurations and credentials.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        Customer GetCustomerById(string id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a customer by ID
        /// </summary>
        /// <remarks>
        /// Returns detailed information about a specific customer including their messaging channel configurations and credentials.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> GetCustomerByIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Update customer information
        /// </summary>
        /// <remarks>
        /// Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to update</param>
        /// <param name="customersUpdateCustomerRequest">Updated customer information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        Customer UpdateCustomer(string id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, int operationIndex = 0);

        /// <summary>
        /// Update customer information
        /// </summary>
        /// <remarks>
        /// Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to update</param>
        /// <param name="customersUpdateCustomerRequest">Updated customer information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> UpdateCustomerWithHttpInfo(string id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new customer account
        /// </summary>
        /// <remarks>
        /// Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Customer name to create the account</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CreateCustomerAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new customer account
        /// </summary>
        /// <remarks>
        /// Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Customer name to create the account</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerWithHttpInfoAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all customers with pagination
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve (starts from 1)</param>
        /// <param name="pageSize">Number of items to return per page</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Customer&gt;</returns>
        System.Threading.Tasks.Task<List<Customer>> GetAllCustomersAsync(int page, int pageSize, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all customers with pagination
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve (starts from 1)</param>
        /// <param name="pageSize">Number of items to return per page</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Customer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Customer>>> GetAllCustomersWithHttpInfoAsync(int page, int pageSize, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a customer by ID
        /// </summary>
        /// <remarks>
        /// Returns detailed information about a specific customer including their messaging channel configurations and credentials.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> GetCustomerByIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a customer by ID
        /// </summary>
        /// <remarks>
        /// Returns detailed information about a specific customer including their messaging channel configurations and credentials.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerByIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update customer information
        /// </summary>
        /// <remarks>
        /// Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to update</param>
        /// <param name="customersUpdateCustomerRequest">Updated customer information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> UpdateCustomerAsync(string id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update customer information
        /// </summary>
        /// <remarks>
        /// Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
        /// </remarks>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to update</param>
        /// <param name="customersUpdateCustomerRequest">Updated customer information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> UpdateCustomerWithHttpInfoAsync(string id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApi : ICustomersApiSync, ICustomersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomersApiGenerated : ICustomersApi
    {
        private Sentdm.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApiGenerated() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApiGenerated(string basePath)
        {
            this.Configuration = Sentdm.Net.Client.Configuration.MergeConfigurations(
                Sentdm.Net.Client.GlobalConfiguration.Instance,
                new Sentdm.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sentdm.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Sentdm.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Sentdm.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApiGenerated"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomersApiGenerated(Sentdm.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sentdm.Net.Client.Configuration.MergeConfigurations(
                Sentdm.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sentdm.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Sentdm.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Sentdm.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApiGenerated"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomersApiGenerated(Sentdm.Net.Client.ISynchronousClient client, Sentdm.Net.Client.IAsynchronousClient asyncClient, Sentdm.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sentdm.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sentdm.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sentdm.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sentdm.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sentdm.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new customer account Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Customer name to create the account</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        public Customer CreateCustomer(string body, int operationIndex = 0)
        {
            Sentdm.Net.Client.ApiResponse<Customer> localVarResponse = CreateCustomerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new customer account Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Customer name to create the account</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        public Sentdm.Net.Client.ApiResponse<Customer> CreateCustomerWithHttpInfo(string body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'body' when calling CustomersApi->CreateCustomer");
            }

            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Customer>("/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new customer account Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Customer name to create the account</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CreateCustomerAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sentdm.Net.Client.ApiResponse<Customer> localVarResponse = await CreateCustomerWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new customer account Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Customer name to create the account</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public virtual async System.Threading.Tasks.Task<Sentdm.Net.Client.ApiResponse<Customer>> CreateCustomerWithHttpInfoAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'body' when calling CustomersApi->CreateCustomer");
            }


            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Customer>("/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a customer Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCustomer(string id, int operationIndex = 0)
        {
            DeleteCustomerWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a customer Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sentdm.Net.Client.ApiResponse<Object> DeleteCustomerWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->DeleteCustomer");
            }

            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Sentdm.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.DeleteCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a customer Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCustomerWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a customer Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public virtual async System.Threading.Tasks.Task<Sentdm.Net.Client.ApiResponse<Object>> DeleteCustomerWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->DeleteCustomer");
            }


            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Sentdm.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.DeleteCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all customers with pagination Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve (starts from 1)</param>
        /// <param name="pageSize">Number of items to return per page</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Customer&gt;</returns>
        public List<Customer> GetAllCustomers(int page, int pageSize, int operationIndex = 0)
        {
            Sentdm.Net.Client.ApiResponse<List<Customer>> localVarResponse = GetAllCustomersWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all customers with pagination Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve (starts from 1)</param>
        /// <param name="pageSize">Number of items to return per page</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Customer&gt;</returns>
        public Sentdm.Net.Client.ApiResponse<List<Customer>> GetAllCustomersWithHttpInfo(int page, int pageSize, int operationIndex = 0)
        {
            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Sentdm.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page, "int32"));
            localVarRequestOptions.QueryParameters.Add(Sentdm.Net.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize, "int32"));

            localVarRequestOptions.Operation = "CustomersApi.GetAllCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Customer>>("/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all customers with pagination Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve (starts from 1)</param>
        /// <param name="pageSize">Number of items to return per page</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Customer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Customer>> GetAllCustomersAsync(int page, int pageSize, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sentdm.Net.Client.ApiResponse<List<Customer>> localVarResponse = await GetAllCustomersWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all customers with pagination Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to retrieve (starts from 1)</param>
        /// <param name="pageSize">Number of items to return per page</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Customer&gt;)</returns>
        public virtual async System.Threading.Tasks.Task<Sentdm.Net.Client.ApiResponse<List<Customer>>> GetAllCustomersWithHttpInfoAsync(int page, int pageSize, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Sentdm.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page, "int32"));
            localVarRequestOptions.QueryParameters.Add(Sentdm.Net.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize, "int32"));

            localVarRequestOptions.Operation = "CustomersApi.GetAllCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Customer>>("/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a customer by ID Returns detailed information about a specific customer including their messaging channel configurations and credentials.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        public Customer GetCustomerById(string id, int operationIndex = 0)
        {
            Sentdm.Net.Client.ApiResponse<Customer> localVarResponse = GetCustomerByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer by ID Returns detailed information about a specific customer including their messaging channel configurations and credentials.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        public Sentdm.Net.Client.ApiResponse<Customer> GetCustomerByIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->GetCustomerById");
            }

            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Sentdm.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.GetCustomerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Customer>("/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a customer by ID Returns detailed information about a specific customer including their messaging channel configurations and credentials.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> GetCustomerByIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sentdm.Net.Client.ApiResponse<Customer> localVarResponse = await GetCustomerByIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer by ID Returns detailed information about a specific customer including their messaging channel configurations and credentials.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public virtual async System.Threading.Tasks.Task<Sentdm.Net.Client.ApiResponse<Customer>> GetCustomerByIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->GetCustomerById");
            }


            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Sentdm.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.GetCustomerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Customer>("/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update customer information Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to update</param>
        /// <param name="customersUpdateCustomerRequest">Updated customer information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        public Customer UpdateCustomer(string id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, int operationIndex = 0)
        {
            Sentdm.Net.Client.ApiResponse<Customer> localVarResponse = UpdateCustomerWithHttpInfo(id, customersUpdateCustomerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer information Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to update</param>
        /// <param name="customersUpdateCustomerRequest">Updated customer information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        public Sentdm.Net.Client.ApiResponse<Customer> UpdateCustomerWithHttpInfo(string id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->UpdateCustomer");
            }

            // verify the required parameter 'customersUpdateCustomerRequest' is set
            if (customersUpdateCustomerRequest == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'customersUpdateCustomerRequest' when calling CustomersApi->UpdateCustomer");
            }

            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Sentdm.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customersUpdateCustomerRequest;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Customer>("/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update customer information Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to update</param>
        /// <param name="customersUpdateCustomerRequest">Updated customer information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> UpdateCustomerAsync(string id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sentdm.Net.Client.ApiResponse<Customer> localVarResponse = await UpdateCustomerWithHttpInfoAsync(id, customersUpdateCustomerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer information Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
        /// </summary>
        /// <exception cref="Sentdm.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the customer to update</param>
        /// <param name="customersUpdateCustomerRequest">Updated customer information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public virtual async System.Threading.Tasks.Task<Sentdm.Net.Client.ApiResponse<Customer>> UpdateCustomerWithHttpInfoAsync(string id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->UpdateCustomer");
            }

            // verify the required parameter 'customersUpdateCustomerRequest' is set
            if (customersUpdateCustomerRequest == null)
            {
                throw new Sentdm.Net.Client.ApiException(400, "Missing required parameter 'customersUpdateCustomerRequest' when calling CustomersApi->UpdateCustomer");
            }


            Sentdm.Net.Client.RequestOptions localVarRequestOptions = new Sentdm.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sentdm.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sentdm.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Sentdm.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = customersUpdateCustomerRequest;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Customer>("/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
