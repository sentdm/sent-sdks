//
// MessagesAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MessagesAPI {

    weak var client: SentdmClient?

    public init(client: SentdmClient) {
        self.client = client
    }

    /**
     Send a message to a contact using a template
     
     - parameter sendMessageToContactRequest: (body) Message details including customer ID, contact ID, and template ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sendMessageToContactSync(sendMessageToContactRequest: SendMessageToContactRequest, apiResponseQueue: DispatchQueue = SentdmAPI.apiResponseQueue, completion: @escaping ((_ data: MessagesSendMessageToContactResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return sendMessageToContactWithRequestBuilder(sendMessageToContactRequest: sendMessageToContactRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send a message to a contact using a template
     
     - parameter sendMessageToContactRequest: (body) Message details including customer ID, contact ID, and template ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func sendMessageToContactAsyncMappedParams(sendMessageToContactRequest: SendMessageToContactRequest) async throws -> MessagesSendMessageToContactResponse {
        return try await withCheckedThrowingContinuation { continuation in
            sendMessageToContactWithRequestBuilder(sendMessageToContactRequest: sendMessageToContactRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Send a message to a contact using a template
     
     - parameter sendMessageToContactRequest: (body) Message details including customer ID, contact ID, and template ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func sendMessageToContact(
        customerId: String,
        contactId: String,
        templateId: String
    ) async throws -> MessagesSendMessageToContactResponse {
        let sendMessageToContactRequest = SendMessageToContactRequest(
            customerId: customerId,
            contactId: contactId,
            templateId: templateId
        )
        return try await withCheckedThrowingContinuation { continuation in
            sendMessageToContactWithRequestBuilder(sendMessageToContactRequest: sendMessageToContactRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Send a message to a contact using a template
     
     - parameter sendMessageToContactRequest: (body) Message details including customer ID, contact ID, and template ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func sendMessageToContact(
        customerId: String,
        contactId: String,
        templateId: String
    ) async throws -> MessagesSendMessageToContactResponse {
        let sendMessageToContactRequest = SendMessageToContactRequest(
            customerId: customerId,
            contactId: contactId,
            templateId: templateId
        )
        return try await withCheckedThrowingContinuation { continuation in
            sendMessageToContactWithRequestBuilder(sendMessageToContactRequest: sendMessageToContactRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Send a message to a contact using a template
     - POST /messages
     - Sends a templated message to a specific contact. The platform automatically determines the optimal channel (SMS or WhatsApp) based on the contact's preferences and availability. Messages are sent using pre-defined templates to ensure consistent formatting and compliance across channels.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter sendMessageToContactRequest: (body) Message details including customer ID, contact ID, and template ID 
     - returns: RequestBuilder<MessagesSendMessageToContactResponse> Sends a templated message to a specific contact. The platform automatically determines the optimal channel (SMS or WhatsApp) based on the contact&#39;s preferences and availability. Messages are sent using pre-defined templates to ensure consistent formatting and compliance across channels.
     */
    open class func sendMessageToContactWithRequestBuilder(
            sendMessageToContactRequest: SendMessageToContactRequest
    ) -> RequestBuilder<MessagesSendMessageToContactResponse> {
        let basePath = SentdmAPI.basePath;
        let localVariablePath = "/messages"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendMessageToContactRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: SentdmAPI.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: SentdmAPI.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<MessagesSendMessageToContactResponse>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /messages")
    }

    /**
     Send a message to a contact using a template
     - POST /messages
     - Sends a templated message to a specific contact. The platform automatically determines the optimal channel (SMS or WhatsApp) based on the contact's preferences and availability. Messages are sent using pre-defined templates to ensure consistent formatting and compliance across channels.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter sendMessageToContactRequest: (body) Message details including customer ID, contact ID, and template ID 
     - returns: RequestBuilder<MessagesSendMessageToContactResponse> Sends a templated message to a specific contact. The platform automatically determines the optimal channel (SMS or WhatsApp) based on the contact&#39;s preferences and availability. Messages are sent using pre-defined templates to ensure consistent formatting and compliance across channels.
     */
    open func sendMessageToContactWithRequestBuilder(
            sendMessageToContactRequest: SendMessageToContactRequest
    ) -> RequestBuilder<MessagesSendMessageToContactResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/messages"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendMessageToContactRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: self.client!.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: self.client!.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<MessagesSendMessageToContactResponse>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /messages")
    }


    /**
     Send a message to a phone number using a template
     
     - parameter sendMessageToPhoneNumberRequest: (body) Message details including customer ID, phone number, and template ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sendMessageToPhoneNumberSync(sendMessageToPhoneNumberRequest: SendMessageToPhoneNumberRequest, apiResponseQueue: DispatchQueue = SentdmAPI.apiResponseQueue, completion: @escaping ((_ data: MessagesSendMessageToPhoneNumberResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return sendMessageToPhoneNumberWithRequestBuilder(sendMessageToPhoneNumberRequest: sendMessageToPhoneNumberRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send a message to a phone number using a template
     
     - parameter sendMessageToPhoneNumberRequest: (body) Message details including customer ID, phone number, and template ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func sendMessageToPhoneNumberAsyncMappedParams(sendMessageToPhoneNumberRequest: SendMessageToPhoneNumberRequest) async throws -> MessagesSendMessageToPhoneNumberResponse {
        return try await withCheckedThrowingContinuation { continuation in
            sendMessageToPhoneNumberWithRequestBuilder(sendMessageToPhoneNumberRequest: sendMessageToPhoneNumberRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Send a message to a phone number using a template
     
     - parameter sendMessageToPhoneNumberRequest: (body) Message details including customer ID, phone number, and template ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func sendMessageToPhoneNumber(
        customerId: String,
        phoneNumber: String,
        templateId: String
    ) async throws -> MessagesSendMessageToPhoneNumberResponse {
        let sendMessageToPhoneNumberRequest = SendMessageToPhoneNumberRequest(
            customerId: customerId,
            phoneNumber: phoneNumber,
            templateId: templateId
        )
        return try await withCheckedThrowingContinuation { continuation in
            sendMessageToPhoneNumberWithRequestBuilder(sendMessageToPhoneNumberRequest: sendMessageToPhoneNumberRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Send a message to a phone number using a template
     
     - parameter sendMessageToPhoneNumberRequest: (body) Message details including customer ID, phone number, and template ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func sendMessageToPhoneNumber(
        customerId: String,
        phoneNumber: String,
        templateId: String
    ) async throws -> MessagesSendMessageToPhoneNumberResponse {
        let sendMessageToPhoneNumberRequest = SendMessageToPhoneNumberRequest(
            customerId: customerId,
            phoneNumber: phoneNumber,
            templateId: templateId
        )
        return try await withCheckedThrowingContinuation { continuation in
            sendMessageToPhoneNumberWithRequestBuilder(sendMessageToPhoneNumberRequest: sendMessageToPhoneNumberRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Send a message to a phone number using a template
     - POST /messages/phone-number
     - Sends a templated message directly to a phone number without requiring a pre-existing contact. The system will attempt to determine the best channel for delivery and create a contact record if one doesn't exist.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter sendMessageToPhoneNumberRequest: (body) Message details including customer ID, phone number, and template ID 
     - returns: RequestBuilder<MessagesSendMessageToPhoneNumberResponse> Sends a templated message directly to a phone number without requiring a pre-existing contact. The system will attempt to determine the best channel for delivery and create a contact record if one doesn&#39;t exist.
     */
    open class func sendMessageToPhoneNumberWithRequestBuilder(
            sendMessageToPhoneNumberRequest: SendMessageToPhoneNumberRequest
    ) -> RequestBuilder<MessagesSendMessageToPhoneNumberResponse> {
        let basePath = SentdmAPI.basePath;
        let localVariablePath = "/messages/phone-number"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendMessageToPhoneNumberRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: SentdmAPI.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: SentdmAPI.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<MessagesSendMessageToPhoneNumberResponse>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /messages/phone-number")
    }

    /**
     Send a message to a phone number using a template
     - POST /messages/phone-number
     - Sends a templated message directly to a phone number without requiring a pre-existing contact. The system will attempt to determine the best channel for delivery and create a contact record if one doesn't exist.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter sendMessageToPhoneNumberRequest: (body) Message details including customer ID, phone number, and template ID 
     - returns: RequestBuilder<MessagesSendMessageToPhoneNumberResponse> Sends a templated message directly to a phone number without requiring a pre-existing contact. The system will attempt to determine the best channel for delivery and create a contact record if one doesn&#39;t exist.
     */
    open func sendMessageToPhoneNumberWithRequestBuilder(
            sendMessageToPhoneNumberRequest: SendMessageToPhoneNumberRequest
    ) -> RequestBuilder<MessagesSendMessageToPhoneNumberResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/messages/phone-number"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendMessageToPhoneNumberRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: self.client!.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: self.client!.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<MessagesSendMessageToPhoneNumberResponse>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /messages/phone-number")
    }

}
