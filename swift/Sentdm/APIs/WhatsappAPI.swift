//
// WhatsappAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WhatsappAPI {

    weak var client: SentdmClient?

    public init(client: SentdmClient) {
        self.client = client
    }

    /**
     Retrieve WhatsApp contact information
     
     - parameter phoneNumber: (query) Phone number in international format (E.164) 
     - parameter retrieveIfDoesNotExists: (query) Whether to create a new contact if one doesn&#39;t exist 
     - parameter sentId: (query) Optional Sent platform identifier for tracking (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWhatsappContactSync(phoneNumber: String, retrieveIfDoesNotExists: Bool, sentId: String? = nil, apiResponseQueue: DispatchQueue = SentdmAPI.apiResponseQueue, completion: @escaping ((_ data: WhatsAppPayload?, _ error: Error?) -> Void)) -> RequestTask {
        return getWhatsappContactWithRequestBuilder(phoneNumber: phoneNumber, retrieveIfDoesNotExists: retrieveIfDoesNotExists, sentId: sentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve WhatsApp contact information
     
     - parameter phoneNumber: (query) Phone number in international format (E.164) 
     - parameter retrieveIfDoesNotExists: (query) Whether to create a new contact if one doesn&#39;t exist 
     - parameter sentId: (query) Optional Sent platform identifier for tracking (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getWhatsappContactAsyncMappedParams(phoneNumber: String, retrieveIfDoesNotExists: Bool, sentId: String? = nil) async throws -> WhatsAppPayload {
        return try await withCheckedThrowingContinuation { continuation in
            getWhatsappContactWithRequestBuilder(phoneNumber: phoneNumber, retrieveIfDoesNotExists: retrieveIfDoesNotExists, sentId: sentId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Retrieve WhatsApp contact information
     
     - parameter phoneNumber: (query) Phone number in international format (E.164) 
     - parameter retrieveIfDoesNotExists: (query) Whether to create a new contact if one doesn&#39;t exist 
     - parameter sentId: (query) Optional Sent platform identifier for tracking (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getWhatsappContact(
        phoneNumber: String,
        retrieveIfDoesNotExists: Bool,
        sentId: String? = nil
    ) async throws -> WhatsAppPayload {
        return try await withCheckedThrowingContinuation { continuation in
            getWhatsappContactWithRequestBuilder(phoneNumber: phoneNumber, retrieveIfDoesNotExists: retrieveIfDoesNotExists, sentId: sentId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Retrieve WhatsApp contact information
     
     - parameter phoneNumber: (query) Phone number in international format (E.164) 
     - parameter retrieveIfDoesNotExists: (query) Whether to create a new contact if one doesn&#39;t exist 
     - parameter sentId: (query) Optional Sent platform identifier for tracking (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getWhatsappContact(
        phoneNumber: String,
        retrieveIfDoesNotExists: Bool,
        sentId: String? = nil
    ) async throws -> WhatsAppPayload {
        return try await withCheckedThrowingContinuation { continuation in
            getWhatsappContactWithRequestBuilder(phoneNumber: phoneNumber, retrieveIfDoesNotExists: retrieveIfDoesNotExists, sentId: sentId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Retrieve WhatsApp contact information
     - GET /whatsapp
     - Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter phoneNumber: (query) Phone number in international format (E.164) 
     - parameter retrieveIfDoesNotExists: (query) Whether to create a new contact if one doesn&#39;t exist 
     - parameter sentId: (query) Optional Sent platform identifier for tracking (optional)
     - returns: RequestBuilder<WhatsAppPayload> Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
     */
    open class func getWhatsappContactWithRequestBuilder(
            phoneNumber: String,
            retrieveIfDoesNotExists: Bool,
            sentId: String? = nil
    ) -> RequestBuilder<WhatsAppPayload> {
        let basePath = SentdmAPI.basePath;
        let localVariablePath = "/whatsapp"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "phoneNumber": (wrappedValue: phoneNumber.encodeToJSON(), isExplode: true),
            "retrieveIfDoesNotExists": (wrappedValue: retrieveIfDoesNotExists.encodeToJSON(), isExplode: true),
            "sentId": (wrappedValue: sentId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: SentdmAPI.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: SentdmAPI.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<WhatsAppPayload>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /whatsapp")
    }

    /**
     Retrieve WhatsApp contact information
     - GET /whatsapp
     - Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter phoneNumber: (query) Phone number in international format (E.164) 
     - parameter retrieveIfDoesNotExists: (query) Whether to create a new contact if one doesn&#39;t exist 
     - parameter sentId: (query) Optional Sent platform identifier for tracking (optional)
     - returns: RequestBuilder<WhatsAppPayload> Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
     */
    open func getWhatsappContactWithRequestBuilder(
            phoneNumber: String,
            retrieveIfDoesNotExists: Bool,
            sentId: String? = nil
    ) -> RequestBuilder<WhatsAppPayload> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/whatsapp"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "phoneNumber": (wrappedValue: phoneNumber.encodeToJSON(), isExplode: true),
            "retrieveIfDoesNotExists": (wrappedValue: retrieveIfDoesNotExists.encodeToJSON(), isExplode: true),
            "sentId": (wrappedValue: sentId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: self.client!.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: self.client!.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<WhatsAppPayload>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /whatsapp")
    }

}
