//
// CustomersAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CustomersAPI {

    weak var client: SentdmClient?

    public init(client: SentdmClient) {
        self.client = client
    }

    /**
     Create a new customer account
     
     - parameter body: (body) Customer name to create the account 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createCustomerSync(body: String, apiResponseQueue: DispatchQueue = SentdmAPI.apiResponseQueue, completion: @escaping ((_ data: Customer?, _ error: Error?) -> Void)) -> RequestTask {
        return createCustomerWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new customer account
     
     - parameter body: (body) Customer name to create the account 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func createCustomerAsyncMappedParams(body: String) async throws -> Customer {
        return try await withCheckedThrowingContinuation { continuation in
            createCustomerWithRequestBuilder(body: body).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Create a new customer account
     
     - parameter body: (body) Customer name to create the account 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func createCustomer(
    ) async throws -> Customer {
        let body = String(
        )
        return try await withCheckedThrowingContinuation { continuation in
            createCustomerWithRequestBuilder(body: body).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Create a new customer account
     
     - parameter body: (body) Customer name to create the account 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func createCustomer(
    ) async throws -> Customer {
        let body = String(
        )
        return try await withCheckedThrowingContinuation { continuation in
            createCustomerWithRequestBuilder(body: body).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Create a new customer account
     - POST /customers
     - Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter body: (body) Customer name to create the account 
     - returns: RequestBuilder<Customer> Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
     */
    open class func createCustomerWithRequestBuilder(
            body: String
    ) -> RequestBuilder<Customer> {
        let basePath = SentdmAPI.basePath;
        let localVariablePath = "/customers"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: SentdmAPI.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: SentdmAPI.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Customer>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /customers")
    }

    /**
     Create a new customer account
     - POST /customers
     - Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter body: (body) Customer name to create the account 
     - returns: RequestBuilder<Customer> Creates a new customer account in the Sent platform. This endpoint initializes a new customer profile with basic information and returns the created customer details including generated IDs and credentials for various messaging channels.
     */
    open func createCustomerWithRequestBuilder(
            body: String
    ) -> RequestBuilder<Customer> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/customers"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: self.client!.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: self.client!.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Customer>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /customers")
    }


    /**
     Delete a customer
     
     - parameter id: (path) Unique identifier of the customer to delete 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteCustomerSync(id: String, apiResponseQueue: DispatchQueue = SentdmAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteCustomerWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a customer
     
     - parameter id: (path) Unique identifier of the customer to delete 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func deleteCustomerAsyncMappedParams(id: String) async throws -> Void {
        return try await withCheckedThrowingContinuation { continuation in
            deleteCustomerWithRequestBuilder(id: id).execute { result in
                switch result {
                case .success:
                    continuation.resume(returning: ())
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Delete a customer
     
     - parameter id: (path) Unique identifier of the customer to delete 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func deleteCustomer(
        id: String
    ) async throws -> Void {
        return try await withCheckedThrowingContinuation { continuation in
            deleteCustomerWithRequestBuilder(id: id).execute { result in
                switch result {
                case .success:
                    continuation.resume(returning: ())
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Delete a customer
     
     - parameter id: (path) Unique identifier of the customer to delete 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func deleteCustomer(
        id: String
    ) async throws -> Void {
        return try await withCheckedThrowingContinuation { continuation in
            deleteCustomerWithRequestBuilder(id: id).execute { result in
                switch result {
                case .success:
                    continuation.resume(returning: ())
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Delete a customer
     - DELETE /customers/{id}
     - Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter id: (path) Unique identifier of the customer to delete 
     - returns: RequestBuilder<Void> Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
     */
    open class func deleteCustomerWithRequestBuilder(
            id: String
    ) -> RequestBuilder<Void> {
        let basePath = SentdmAPI.basePath;
        var localVariablePath = "/customers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: SentdmAPI.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: SentdmAPI.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Void>.Type = SentdmAPI.requestBuilderFactory.getNonDecodableBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "DELETE", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to DELETE /customers/{id}")
    }

    /**
     Delete a customer
     - DELETE /customers/{id}
     - Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter id: (path) Unique identifier of the customer to delete 
     - returns: RequestBuilder<Void> Permanently deletes a customer and all associated data. This action cannot be undone. All active services for this customer will be terminated.
     */
    open func deleteCustomerWithRequestBuilder(
            id: String
    ) -> RequestBuilder<Void> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/customers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: self.client!.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: self.client!.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Void>.Type = SentdmAPI.requestBuilderFactory.getNonDecodableBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "DELETE", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to DELETE /customers/{id}")
    }


    /**
     Retrieve all customers with pagination
     
     - parameter page: (query) Page number to retrieve (starts from 1) 
     - parameter pageSize: (query) Number of items to return per page 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllCustomersSync(page: Int, pageSize: Int, apiResponseQueue: DispatchQueue = SentdmAPI.apiResponseQueue, completion: @escaping ((_ data: [Customer]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllCustomersWithRequestBuilder(page: page, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all customers with pagination
     
     - parameter page: (query) Page number to retrieve (starts from 1) 
     - parameter pageSize: (query) Number of items to return per page 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getAllCustomersAsyncMappedParams(page: Int, pageSize: Int) async throws -> [Customer] {
        return try await withCheckedThrowingContinuation { continuation in
            getAllCustomersWithRequestBuilder(page: page, pageSize: pageSize).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Retrieve all customers with pagination
     
     - parameter page: (query) Page number to retrieve (starts from 1) 
     - parameter pageSize: (query) Number of items to return per page 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getAllCustomers(
        page: Int,
        pageSize: Int
    ) async throws -> [Customer] {
        return try await withCheckedThrowingContinuation { continuation in
            getAllCustomersWithRequestBuilder(page: page, pageSize: pageSize).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Retrieve all customers with pagination
     
     - parameter page: (query) Page number to retrieve (starts from 1) 
     - parameter pageSize: (query) Number of items to return per page 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getAllCustomers(
        page: Int,
        pageSize: Int
    ) async throws -> [Customer] {
        return try await withCheckedThrowingContinuation { continuation in
            getAllCustomersWithRequestBuilder(page: page, pageSize: pageSize).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Retrieve all customers with pagination
     - GET /customers
     - Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter page: (query) Page number to retrieve (starts from 1) 
     - parameter pageSize: (query) Number of items to return per page 
     - returns: RequestBuilder<[Customer]> Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
     */
    open class func getAllCustomersWithRequestBuilder(
            page: Int,
            pageSize: Int
    ) -> RequestBuilder<[Customer]> {
        let basePath = SentdmAPI.basePath;
        let localVariablePath = "/customers"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: SentdmAPI.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: SentdmAPI.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[Customer]>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /customers")
    }

    /**
     Retrieve all customers with pagination
     - GET /customers
     - Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter page: (query) Page number to retrieve (starts from 1) 
     - parameter pageSize: (query) Number of items to return per page 
     - returns: RequestBuilder<[Customer]> Returns a paginated list of all customers. Use page and pageSize parameters to control the number of results returned. Results are sorted by creation date in descending order.
     */
    open func getAllCustomersWithRequestBuilder(
            page: Int,
            pageSize: Int
    ) -> RequestBuilder<[Customer]> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/customers"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: self.client!.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: self.client!.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[Customer]>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /customers")
    }


    /**
     Retrieve a customer by ID
     
     - parameter id: (path) Unique identifier of the customer 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCustomerByIdSync(id: String, apiResponseQueue: DispatchQueue = SentdmAPI.apiResponseQueue, completion: @escaping ((_ data: Customer?, _ error: Error?) -> Void)) -> RequestTask {
        return getCustomerByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a customer by ID
     
     - parameter id: (path) Unique identifier of the customer 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getCustomerByIdAsyncMappedParams(id: String) async throws -> Customer {
        return try await withCheckedThrowingContinuation { continuation in
            getCustomerByIdWithRequestBuilder(id: id).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Retrieve a customer by ID
     
     - parameter id: (path) Unique identifier of the customer 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getCustomerById(
        id: String
    ) async throws -> Customer {
        return try await withCheckedThrowingContinuation { continuation in
            getCustomerByIdWithRequestBuilder(id: id).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Retrieve a customer by ID
     
     - parameter id: (path) Unique identifier of the customer 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getCustomerById(
        id: String
    ) async throws -> Customer {
        return try await withCheckedThrowingContinuation { continuation in
            getCustomerByIdWithRequestBuilder(id: id).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Retrieve a customer by ID
     - GET /customers/{id}
     - Returns detailed information about a specific customer including their messaging channel configurations and credentials.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter id: (path) Unique identifier of the customer 
     - returns: RequestBuilder<Customer> Returns detailed information about a specific customer including their messaging channel configurations and credentials.
     */
    open class func getCustomerByIdWithRequestBuilder(
            id: String
    ) -> RequestBuilder<Customer> {
        let basePath = SentdmAPI.basePath;
        var localVariablePath = "/customers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: SentdmAPI.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: SentdmAPI.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Customer>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /customers/{id}")
    }

    /**
     Retrieve a customer by ID
     - GET /customers/{id}
     - Returns detailed information about a specific customer including their messaging channel configurations and credentials.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter id: (path) Unique identifier of the customer 
     - returns: RequestBuilder<Customer> Returns detailed information about a specific customer including their messaging channel configurations and credentials.
     */
    open func getCustomerByIdWithRequestBuilder(
            id: String
    ) -> RequestBuilder<Customer> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/customers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: self.client!.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: self.client!.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Customer>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /customers/{id}")
    }


    /**
     Update customer information
     
     - parameter id: (path) Unique identifier of the customer to update 
     - parameter customersUpdateCustomerRequest: (body) Updated customer information 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateCustomerSync(id: String, customersUpdateCustomerRequest: CustomersUpdateCustomerRequest, apiResponseQueue: DispatchQueue = SentdmAPI.apiResponseQueue, completion: @escaping ((_ data: Customer?, _ error: Error?) -> Void)) -> RequestTask {
        return updateCustomerWithRequestBuilder(id: id, customersUpdateCustomerRequest: customersUpdateCustomerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update customer information
     
     - parameter id: (path) Unique identifier of the customer to update 
     - parameter customersUpdateCustomerRequest: (body) Updated customer information 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func updateCustomerAsyncMappedParams(id: String, customersUpdateCustomerRequest: CustomersUpdateCustomerRequest) async throws -> Customer {
        return try await withCheckedThrowingContinuation { continuation in
            updateCustomerWithRequestBuilder(id: id, customersUpdateCustomerRequest: customersUpdateCustomerRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Update customer information
     
     - parameter id: (path) Unique identifier of the customer to update 
     - parameter customersUpdateCustomerRequest: (body) Updated customer information 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func updateCustomer(
        id: String,
        name: String? = nil, 
        sendingPhoneNumber: String? = nil, 
        smsMessagingProfileId: String? = nil, 
        smsBearerToken: String? = nil
    ) async throws -> Customer {
        let customersUpdateCustomerRequest = CustomersUpdateCustomerRequest(
            name: name,
            sendingPhoneNumber: sendingPhoneNumber,
            smsMessagingProfileId: smsMessagingProfileId,
            smsBearerToken: smsBearerToken
        )
        return try await withCheckedThrowingContinuation { continuation in
            updateCustomerWithRequestBuilder(id: id, customersUpdateCustomerRequest: customersUpdateCustomerRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Update customer information
     
     - parameter id: (path) Unique identifier of the customer to update 
     - parameter customersUpdateCustomerRequest: (body) Updated customer information 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func updateCustomer(
        id: String,
        name: String? = nil, 
        sendingPhoneNumber: String? = nil, 
        smsMessagingProfileId: String? = nil, 
        smsBearerToken: String? = nil
    ) async throws -> Customer {
        let customersUpdateCustomerRequest = CustomersUpdateCustomerRequest(
            name: name,
            sendingPhoneNumber: sendingPhoneNumber,
            smsMessagingProfileId: smsMessagingProfileId,
            smsBearerToken: smsBearerToken
        )
        return try await withCheckedThrowingContinuation { continuation in
            updateCustomerWithRequestBuilder(id: id, customersUpdateCustomerRequest: customersUpdateCustomerRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Update customer information
     - PUT /customers/{id}
     - Updates an existing customer's information including messaging channel configurations. All fields in the request body will override existing values.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter id: (path) Unique identifier of the customer to update 
     - parameter customersUpdateCustomerRequest: (body) Updated customer information 
     - returns: RequestBuilder<Customer> Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
     */
    open class func updateCustomerWithRequestBuilder(
            id: String,
            customersUpdateCustomerRequest: CustomersUpdateCustomerRequest
    ) -> RequestBuilder<Customer> {
        let basePath = SentdmAPI.basePath;
        var localVariablePath = "/customers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customersUpdateCustomerRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: SentdmAPI.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: SentdmAPI.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Customer>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "PUT", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to PUT /customers/{id}")
    }

    /**
     Update customer information
     - PUT /customers/{id}
     - Updates an existing customer's information including messaging channel configurations. All fields in the request body will override existing values.
     - API Key:
       - type: apiKey x-api-key 
       - name: ApiKey
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter id: (path) Unique identifier of the customer to update 
     - parameter customersUpdateCustomerRequest: (body) Updated customer information 
     - returns: RequestBuilder<Customer> Updates an existing customer&#39;s information including messaging channel configurations. All fields in the request body will override existing values.
     */
    open func updateCustomerWithRequestBuilder(
            id: String,
            customersUpdateCustomerRequest: CustomersUpdateCustomerRequest
    ) -> RequestBuilder<Customer> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/customers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customersUpdateCustomerRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-api-key", value: self.client!.apiKey, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "", name: "", value: self.client!.bearerAuth, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Customer>.Type = SentdmAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "PUT", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to PUT /customers/{id}")
    }

}
