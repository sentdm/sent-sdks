//
// Customer.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a customer account within the Sent platform, including messaging channel configurations and credentials */
public struct Customer: Codable, JSONEncodable, Hashable {

    /** Unique identifier for the customer */
    public var id: String?
    /** Name of the customer organization */
    public var name: String?
    /** Primary phone number used for sending messages */
    public var sendingPhoneNumber: String?
    /** Identifier for the SMS messaging profile */
    public var smsMessagingProfileId: String?
    /** Bearer token for authenticating SMS requests */
    public var smsBearerToken: String?
    /** Timestamp when the customer account was created */
    public var createdAt: Date?
    /** Timestamp when the customer account was last updated */
    public var updatedAt: Date?

    public init(id: String? = nil, name: String? = nil, sendingPhoneNumber: String? = nil, smsMessagingProfileId: String? = nil, smsBearerToken: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.name = name
        self.sendingPhoneNumber = sendingPhoneNumber
        self.smsMessagingProfileId = smsMessagingProfileId
        self.smsBearerToken = smsBearerToken
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case sendingPhoneNumber
        case smsMessagingProfileId
        case smsBearerToken
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encodeIfPresent(id, forKey: .id)
        try codingContainer.encodeIfPresent(name, forKey: .name)
        try codingContainer.encodeIfPresent(sendingPhoneNumber, forKey: .sendingPhoneNumber)
        try codingContainer.encodeIfPresent(smsMessagingProfileId, forKey: .smsMessagingProfileId)
        try codingContainer.encodeIfPresent(smsBearerToken, forKey: .smsBearerToken)
        try codingContainer.encodeIfPresent(createdAt, forKey: .createdAt)
        try codingContainer.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

