//
// WhatsAppPayload.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** WhatsApp contact information including profile and verification details */
public struct WhatsAppPayload: Codable, JSONEncodable, Hashable {

    public enum NumberType: String, Codable, CaseIterable {
        case mobile = "MOBILE"
        case landline = "LANDLINE"
        case voip = "VOIP"
        case unknown = "UNKNOWN"
    }
    /** Unique identifier for the phone number record */
    public var id: String?
    /** Sent platform identifier */
    public var sentId: String?
    /** Phone number in E.164 format */
    public var phoneNumber: String?
    /** Unique WhatsApp identifier for the contact */
    public var whatsappId: String?
    /** ISO country code of the phone number */
    public var countryCode: String?
    /** Type of phone number (MOBILE, LANDLINE, etc) */
    public var numberType: NumberType?
    /** URL to the contact's WhatsApp profile picture */
    public var profilePicture: String?
    /** Indicates if the number belongs to a WhatsApp Business account */
    public var isBusiness: Bool?
    /** Indicates if the WhatsApp account is invalid or deactivated */
    public var invalidRecord: Bool?

    public init(id: String? = nil, sentId: String? = nil, phoneNumber: String? = nil, whatsappId: String? = nil, countryCode: String? = nil, numberType: NumberType? = nil, profilePicture: String? = nil, isBusiness: Bool? = nil, invalidRecord: Bool? = nil) {
        self.id = id
        self.sentId = sentId
        self.phoneNumber = phoneNumber
        self.whatsappId = whatsappId
        self.countryCode = countryCode
        self.numberType = numberType
        self.profilePicture = profilePicture
        self.isBusiness = isBusiness
        self.invalidRecord = invalidRecord
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case sentId
        case phoneNumber
        case whatsappId
        case countryCode
        case numberType
        case profilePicture
        case isBusiness
        case invalidRecord
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encodeIfPresent(id, forKey: .id)
        try codingContainer.encodeIfPresent(sentId, forKey: .sentId)
        try codingContainer.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try codingContainer.encodeIfPresent(whatsappId, forKey: .whatsappId)
        try codingContainer.encodeIfPresent(countryCode, forKey: .countryCode)
        try codingContainer.encodeIfPresent(numberType, forKey: .numberType)
        try codingContainer.encodeIfPresent(profilePicture, forKey: .profilePicture)
        try codingContainer.encodeIfPresent(isBusiness, forKey: .isBusiness)
        try codingContainer.encodeIfPresent(invalidRecord, forKey: .invalidRecord)
    }
}

