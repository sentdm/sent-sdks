/*
Sent.dm Core API

Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.

API version: 1.1.0
Contact: developers@sent.dm
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package sentdm

import (
	"encoding/json"
)

// WhatsAppPayload WhatsApp contact information including profile and verification details
type WhatsAppPayload struct {
	// Unique identifier for the phone number record
	Id *string `json:"id,omitempty"`
	// Sent platform identifier
	SentId *string `json:"sentId,omitempty"`
	// Phone number in E.164 format
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// Unique WhatsApp identifier for the contact
	WhatsappId *string `json:"whatsappId,omitempty"`
	// ISO country code of the phone number
	CountryCode *string `json:"countryCode,omitempty"`
	// Type of phone number (MOBILE, LANDLINE, etc)
	NumberType *string `json:"numberType,omitempty"`
	// URL to the contact's WhatsApp profile picture
	ProfilePicture *string `json:"profilePicture,omitempty"`
	// Indicates if the number belongs to a WhatsApp Business account
	IsBusiness *bool `json:"isBusiness,omitempty"`
	// Indicates if the WhatsApp account is invalid or deactivated
	InvalidRecord *bool `json:"invalidRecord,omitempty"`
}

// NewWhatsAppPayload instantiates a new WhatsAppPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsAppPayload() *WhatsAppPayload {
	this := WhatsAppPayload{}
	return &this
}

// NewWhatsAppPayloadWithDefaults instantiates a new WhatsAppPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsAppPayloadWithDefaults() *WhatsAppPayload {
	this := WhatsAppPayload{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WhatsAppPayload) SetId(v string) {
	o.Id = &v
}

// GetSentId returns the SentId field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetSentId() string {
	if o == nil || isNil(o.SentId) {
		var ret string
		return ret
	}
	return *o.SentId
}

// GetSentIdOk returns a tuple with the SentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetSentIdOk() (*string, bool) {
	if o == nil || isNil(o.SentId) {
    return nil, false
	}
	return o.SentId, true
}

// HasSentId returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasSentId() bool {
	if o != nil && !isNil(o.SentId) {
		return true
	}

	return false
}

// SetSentId gets a reference to the given string and assigns it to the SentId field.
func (o *WhatsAppPayload) SetSentId(v string) {
	o.SentId = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetPhoneNumber() string {
	if o == nil || isNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetPhoneNumberOk() (*string, bool) {
	if o == nil || isNil(o.PhoneNumber) {
    return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasPhoneNumber() bool {
	if o != nil && !isNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *WhatsAppPayload) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetWhatsappId returns the WhatsappId field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetWhatsappId() string {
	if o == nil || isNil(o.WhatsappId) {
		var ret string
		return ret
	}
	return *o.WhatsappId
}

// GetWhatsappIdOk returns a tuple with the WhatsappId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetWhatsappIdOk() (*string, bool) {
	if o == nil || isNil(o.WhatsappId) {
    return nil, false
	}
	return o.WhatsappId, true
}

// HasWhatsappId returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasWhatsappId() bool {
	if o != nil && !isNil(o.WhatsappId) {
		return true
	}

	return false
}

// SetWhatsappId gets a reference to the given string and assigns it to the WhatsappId field.
func (o *WhatsAppPayload) SetWhatsappId(v string) {
	o.WhatsappId = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetCountryCode() string {
	if o == nil || isNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetCountryCodeOk() (*string, bool) {
	if o == nil || isNil(o.CountryCode) {
    return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasCountryCode() bool {
	if o != nil && !isNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *WhatsAppPayload) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetNumberType returns the NumberType field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetNumberType() string {
	if o == nil || isNil(o.NumberType) {
		var ret string
		return ret
	}
	return *o.NumberType
}

// GetNumberTypeOk returns a tuple with the NumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetNumberTypeOk() (*string, bool) {
	if o == nil || isNil(o.NumberType) {
    return nil, false
	}
	return o.NumberType, true
}

// HasNumberType returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasNumberType() bool {
	if o != nil && !isNil(o.NumberType) {
		return true
	}

	return false
}

// SetNumberType gets a reference to the given string and assigns it to the NumberType field.
func (o *WhatsAppPayload) SetNumberType(v string) {
	o.NumberType = &v
}

// GetProfilePicture returns the ProfilePicture field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetProfilePicture() string {
	if o == nil || isNil(o.ProfilePicture) {
		var ret string
		return ret
	}
	return *o.ProfilePicture
}

// GetProfilePictureOk returns a tuple with the ProfilePicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetProfilePictureOk() (*string, bool) {
	if o == nil || isNil(o.ProfilePicture) {
    return nil, false
	}
	return o.ProfilePicture, true
}

// HasProfilePicture returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasProfilePicture() bool {
	if o != nil && !isNil(o.ProfilePicture) {
		return true
	}

	return false
}

// SetProfilePicture gets a reference to the given string and assigns it to the ProfilePicture field.
func (o *WhatsAppPayload) SetProfilePicture(v string) {
	o.ProfilePicture = &v
}

// GetIsBusiness returns the IsBusiness field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetIsBusiness() bool {
	if o == nil || isNil(o.IsBusiness) {
		var ret bool
		return ret
	}
	return *o.IsBusiness
}

// GetIsBusinessOk returns a tuple with the IsBusiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetIsBusinessOk() (*bool, bool) {
	if o == nil || isNil(o.IsBusiness) {
    return nil, false
	}
	return o.IsBusiness, true
}

// HasIsBusiness returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasIsBusiness() bool {
	if o != nil && !isNil(o.IsBusiness) {
		return true
	}

	return false
}

// SetIsBusiness gets a reference to the given bool and assigns it to the IsBusiness field.
func (o *WhatsAppPayload) SetIsBusiness(v bool) {
	o.IsBusiness = &v
}

// GetInvalidRecord returns the InvalidRecord field value if set, zero value otherwise.
func (o *WhatsAppPayload) GetInvalidRecord() bool {
	if o == nil || isNil(o.InvalidRecord) {
		var ret bool
		return ret
	}
	return *o.InvalidRecord
}

// GetInvalidRecordOk returns a tuple with the InvalidRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppPayload) GetInvalidRecordOk() (*bool, bool) {
	if o == nil || isNil(o.InvalidRecord) {
    return nil, false
	}
	return o.InvalidRecord, true
}

// HasInvalidRecord returns a boolean if a field has been set.
func (o *WhatsAppPayload) HasInvalidRecord() bool {
	if o != nil && !isNil(o.InvalidRecord) {
		return true
	}

	return false
}

// SetInvalidRecord gets a reference to the given bool and assigns it to the InvalidRecord field.
func (o *WhatsAppPayload) SetInvalidRecord(v bool) {
	o.InvalidRecord = &v
}

func (o WhatsAppPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.SentId) {
		toSerialize["sentId"] = o.SentId
	}
	if !isNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !isNil(o.WhatsappId) {
		toSerialize["whatsappId"] = o.WhatsappId
	}
	if !isNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !isNil(o.NumberType) {
		toSerialize["numberType"] = o.NumberType
	}
	if !isNil(o.ProfilePicture) {
		toSerialize["profilePicture"] = o.ProfilePicture
	}
	if !isNil(o.IsBusiness) {
		toSerialize["isBusiness"] = o.IsBusiness
	}
	if !isNil(o.InvalidRecord) {
		toSerialize["invalidRecord"] = o.InvalidRecord
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsAppPayload struct {
	value *WhatsAppPayload
	isSet bool
}

func (v NullableWhatsAppPayload) Get() *WhatsAppPayload {
	return v.value
}

func (v *NullableWhatsAppPayload) Set(val *WhatsAppPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsAppPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsAppPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsAppPayload(val *WhatsAppPayload) *NullableWhatsAppPayload {
	return &NullableWhatsAppPayload{value: val, isSet: true}
}

func (v NullableWhatsAppPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsAppPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


