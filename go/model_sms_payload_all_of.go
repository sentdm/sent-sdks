/*
Sent.dm Core API

Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.

API version: 1.1.0
Contact: developers@sent.dm
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package sentdm

import (
	"encoding/json"
)

// SMSPayloadAllOf struct for SMSPayloadAllOf
type SMSPayloadAllOf struct {
	// ISO country code for the phone number
	CountryCode *string `json:"countryCode,omitempty"`
	// Indicates if the phone number is valid for SMS delivery
	ValidNumber *bool `json:"validNumber,omitempty"`
	// Locally formatted version of the phone number
	NationalFormat *string `json:"nationalFormat,omitempty"`
	// Additional payload information in JSON format
	Payload *string `json:"payload,omitempty"`
}

// NewSMSPayloadAllOf instantiates a new SMSPayloadAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSPayloadAllOf() *SMSPayloadAllOf {
	this := SMSPayloadAllOf{}
	return &this
}

// NewSMSPayloadAllOfWithDefaults instantiates a new SMSPayloadAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSPayloadAllOfWithDefaults() *SMSPayloadAllOf {
	this := SMSPayloadAllOf{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *SMSPayloadAllOf) GetCountryCode() string {
	if o == nil || isNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSPayloadAllOf) GetCountryCodeOk() (*string, bool) {
	if o == nil || isNil(o.CountryCode) {
    return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *SMSPayloadAllOf) HasCountryCode() bool {
	if o != nil && !isNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *SMSPayloadAllOf) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetValidNumber returns the ValidNumber field value if set, zero value otherwise.
func (o *SMSPayloadAllOf) GetValidNumber() bool {
	if o == nil || isNil(o.ValidNumber) {
		var ret bool
		return ret
	}
	return *o.ValidNumber
}

// GetValidNumberOk returns a tuple with the ValidNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSPayloadAllOf) GetValidNumberOk() (*bool, bool) {
	if o == nil || isNil(o.ValidNumber) {
    return nil, false
	}
	return o.ValidNumber, true
}

// HasValidNumber returns a boolean if a field has been set.
func (o *SMSPayloadAllOf) HasValidNumber() bool {
	if o != nil && !isNil(o.ValidNumber) {
		return true
	}

	return false
}

// SetValidNumber gets a reference to the given bool and assigns it to the ValidNumber field.
func (o *SMSPayloadAllOf) SetValidNumber(v bool) {
	o.ValidNumber = &v
}

// GetNationalFormat returns the NationalFormat field value if set, zero value otherwise.
func (o *SMSPayloadAllOf) GetNationalFormat() string {
	if o == nil || isNil(o.NationalFormat) {
		var ret string
		return ret
	}
	return *o.NationalFormat
}

// GetNationalFormatOk returns a tuple with the NationalFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSPayloadAllOf) GetNationalFormatOk() (*string, bool) {
	if o == nil || isNil(o.NationalFormat) {
    return nil, false
	}
	return o.NationalFormat, true
}

// HasNationalFormat returns a boolean if a field has been set.
func (o *SMSPayloadAllOf) HasNationalFormat() bool {
	if o != nil && !isNil(o.NationalFormat) {
		return true
	}

	return false
}

// SetNationalFormat gets a reference to the given string and assigns it to the NationalFormat field.
func (o *SMSPayloadAllOf) SetNationalFormat(v string) {
	o.NationalFormat = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *SMSPayloadAllOf) GetPayload() string {
	if o == nil || isNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSPayloadAllOf) GetPayloadOk() (*string, bool) {
	if o == nil || isNil(o.Payload) {
    return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *SMSPayloadAllOf) HasPayload() bool {
	if o != nil && !isNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *SMSPayloadAllOf) SetPayload(v string) {
	o.Payload = &v
}

func (o SMSPayloadAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !isNil(o.ValidNumber) {
		toSerialize["validNumber"] = o.ValidNumber
	}
	if !isNil(o.NationalFormat) {
		toSerialize["nationalFormat"] = o.NationalFormat
	}
	if !isNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return json.Marshal(toSerialize)
}

type NullableSMSPayloadAllOf struct {
	value *SMSPayloadAllOf
	isSet bool
}

func (v NullableSMSPayloadAllOf) Get() *SMSPayloadAllOf {
	return v.value
}

func (v *NullableSMSPayloadAllOf) Set(val *SMSPayloadAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSPayloadAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSPayloadAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSPayloadAllOf(val *SMSPayloadAllOf) *NullableSMSPayloadAllOf {
	return &NullableSMSPayloadAllOf{value: val, isSet: true}
}

func (v NullableSMSPayloadAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSPayloadAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


