/*
Sent.dm Core API

Sent.dm is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.

API version: 1.1.0
Contact: developers@sent.dm
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package sentdm

import (
	"encoding/json"
)

// SmsGetContactInfoResponse struct for SmsGetContactInfoResponse
type SmsGetContactInfoResponse struct {
	Error *string `json:"error,omitempty"`
}

// NewSmsGetContactInfoResponse instantiates a new SmsGetContactInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsGetContactInfoResponse() *SmsGetContactInfoResponse {
	this := SmsGetContactInfoResponse{}
	return &this
}

// NewSmsGetContactInfoResponseWithDefaults instantiates a new SmsGetContactInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsGetContactInfoResponseWithDefaults() *SmsGetContactInfoResponse {
	this := SmsGetContactInfoResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SmsGetContactInfoResponse) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsGetContactInfoResponse) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SmsGetContactInfoResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SmsGetContactInfoResponse) SetError(v string) {
	o.Error = &v
}

func (o SmsGetContactInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableSmsGetContactInfoResponse struct {
	value *SmsGetContactInfoResponse
	isSet bool
}

func (v NullableSmsGetContactInfoResponse) Get() *SmsGetContactInfoResponse {
	return v.value
}

func (v *NullableSmsGetContactInfoResponse) Set(val *SmsGetContactInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsGetContactInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsGetContactInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsGetContactInfoResponse(val *SmsGetContactInfoResponse) *NullableSmsGetContactInfoResponse {
	return &NullableSmsGetContactInfoResponse{value: val, isSet: true}
}

func (v NullableSmsGetContactInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsGetContactInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


